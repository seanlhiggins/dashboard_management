function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.assign.js";
import { useTranslation } from 'react-i18next';
import React, { Children, cloneElement, forwardRef } from 'react';
import { fontSize, padding, reset } from '@looker/design-tokens';
import styled, { css } from 'styled-components';
import { useArrowKeyNav } from '../utils';
import { Tab } from '.';
var TabListLayout = forwardRef(function (_ref, ref) {
  var children = _ref.children,
      selectedIndex = _ref.selectedIndex,
      onSelectTab = _ref.onSelectTab,
      className = _ref.className;

  var _useTranslation = useTranslation('TabList'),
      t = _useTranslation.t;

  var clonedChildren = Children.map(children, function (child, index) {
    return cloneElement(child, {
      index: index,
      onSelect: function onSelect() {
        return onSelectTab && onSelectTab(index);
      },
      selected: index === selectedIndex,
      selectedIndex: selectedIndex
    });
  });
  var navProps = useArrowKeyNav({
    axis: 'horizontal',
    ref: ref
  });
  return React.createElement("div", _extends({
    "aria-label": t('Tabs'),
    className: className,
    role: "tablist"
  }, navProps), clonedChildren);
});
TabListLayout.displayName = 'TabListLayout';
var defaultLayoutCSS = css(["", "{min-width:3rem;}", " + ", "{margin-left:", ";}"], Tab, Tab, Tab, function (props) {
  return props.theme.space.xlarge;
});
var distributeCSS = css(["display:grid;grid-auto-columns:1fr;grid-auto-flow:column;", "{padding:", ";}"], Tab, function (_ref2) {
  var space = _ref2.theme.space;
  return "".concat(space.xsmall, " ").concat(space.medium);
});
export var TabList = styled(TabListLayout).attrs(function (_ref3) {
  var _ref3$fontSize = _ref3.fontSize,
      fontSize = _ref3$fontSize === void 0 ? 'small' : _ref3$fontSize;
  return {
    fontSize: fontSize
  };
}).withConfig({
  displayName: "TabList",
  componentId: "sc-1xnjj79-0"
})(["", " ", " ", " border-bottom:1px solid ", ";-ms-overflow-style:none;overflow-x:auto;scrollbar-width:none;white-space:nowrap;&::-webkit-scrollbar{display:none;}", ""], reset, padding, fontSize, function (props) {
  return props.theme.colors.ui2;
}, function (_ref4) {
  var distribute = _ref4.distribute;
  return distribute ? distributeCSS : defaultLayoutCSS;
});
//# sourceMappingURL=TabList.js.map