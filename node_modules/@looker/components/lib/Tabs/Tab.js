import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useState } from 'react';
import styled from 'styled-components';
import { layout, reset, padding, shouldForwardProp, typography, tabShadowColor } from '@looker/design-tokens';
var TabStyle = styled.button.withConfig({
  shouldForwardProp: shouldForwardProp
}).attrs(function (_ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'button' : _ref$type;
  return {
    type: type
  };
}).withConfig({
  displayName: "Tab__TabStyle",
  componentId: "eojndt-0"
})(["", " ", " ", " ", " background:transparent;border:none;border-bottom:3px solid;border-bottom-color:", ";border-radius:0;", " color:", ";cursor:pointer;font-family:", ";margin:0;&:active{border-bottom-color:", ";}&:active,&:hover{border-bottom-color:transparent;}&:focus{outline:none;}&:hover{border-bottom-color:", ";}&:disabled{border-bottom-color:transparent;color:", ";cursor:default;}"], reset, layout, padding, typography, function (_ref2) {
  var selected = _ref2.selected,
      theme = _ref2.theme;
  return selected ? theme.colors.key : 'transparent';
}, function (_ref3) {
  var focusVisible = _ref3.focusVisible;
  return focusVisible && tabShadowColor;
}, function (_ref4) {
  var selected = _ref4.selected,
      theme = _ref4.theme;
  return selected ? theme.colors.text5 : theme.colors.text2;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.fonts.brand;
}, function (_ref6) {
  var selected = _ref6.selected,
      theme = _ref6.theme;
  return selected ? theme.colors.key : theme.colors.text2;
}, function (_ref7) {
  var selected = _ref7.selected,
      theme = _ref7.theme;
  return selected ? theme.colors.key : theme.colors.ui3;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.colors.text1;
});
var TabJSX = forwardRef(function (props, ref) {
  var children = props.children,
      disabled = props.disabled,
      index = props.index,
      onBlur = props.onBlur,
      onKeyUp = props.onKeyUp,
      onSelect = props.onSelect,
      selected = props.selected,
      restProps = _objectWithoutProperties(props, ["children", "disabled", "index", "onBlur", "onKeyUp", "onSelect", "selected"]);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocusVisible = _useState2[0],
      setFocusVisible = _useState2[1];

  var handleOnKeyUp = function handleOnKeyUp(event) {
    setFocusVisible(true);
    onKeyUp && onKeyUp(event);
  };

  var handleOnBlur = function handleOnBlur(event) {
    setFocusVisible(false);
    onBlur && onBlur(event);
  };

  var onClick = function onClick() {
    if (!disabled && onSelect) {
      onSelect();
    }

    setFocusVisible(false);
  };

  return React.createElement(TabStyle, _extends({
    "aria-controls": "panel-".concat(index),
    "aria-orientation": "horizontal",
    "aria-selected": selected,
    disabled: disabled,
    focusVisible: isFocusVisible,
    id: "tab-".concat(index),
    onBlur: handleOnBlur,
    onClick: onClick,
    onKeyUp: handleOnKeyUp,
    ref: ref,
    role: "tab",
    selected: selected,
    tabIndex: -1
  }, restProps), children);
});
TabJSX.displayName = 'TabJSX';
export var Tab = styled(TabJSX).attrs(function (_ref9) {
  var _ref9$fontSize = _ref9.fontSize,
      fontSize = _ref9$fontSize === void 0 ? 'small' : _ref9$fontSize,
      _ref9$fontWeight = _ref9.fontWeight,
      fontWeight = _ref9$fontWeight === void 0 ? 'medium' : _ref9$fontWeight,
      _ref9$pb = _ref9.pb,
      pb = _ref9$pb === void 0 ? 'small' : _ref9$pb,
      _ref9$pt = _ref9.pt,
      pt = _ref9$pt === void 0 ? 'xsmall' : _ref9$pt;
  return {
    fontSize: fontSize,
    fontWeight: fontWeight,
    pb: pb,
    pt: pt
  };
}).withConfig({
  displayName: "Tab",
  componentId: "eojndt-1"
})([""]);
//# sourceMappingURL=Tab.js.map