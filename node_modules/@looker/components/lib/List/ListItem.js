function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import styled from 'styled-components';
import React, { forwardRef, useContext, useState } from 'react';
import { ListItemDetail } from '../List/ListItemDetail';
import { Text } from '../Text';
import { IconPlaceholder } from '../Icon';
import { Truncate } from '../Truncate';
import { HoverDisclosureContext, HoverDisclosure, undefinedCoalesce, useWrapEvent } from '../utils';
import { ListItemContext } from './ListItemContext';
import { ListItemLabel } from './ListItemLabel';
import { ListItemLayout } from './ListItemLayout';
import { ListItemLayoutAccessory } from './ListItemLayoutAccessory';
import { ListItemWrapper } from './ListItemWrapper';
import { createSafeRel, getDetailOptions, listItemDimensions } from './utils';

var TruncateWrapper = function TruncateWrapper(_ref) {
  var children = _ref.children,
      color = _ref.color,
      fontSize = _ref.fontSize,
      lineHeight = _ref.lineHeight;
  return React.createElement(Text, {
    color: color,
    fontSize: fontSize,
    lineHeight: lineHeight
  }, React.createElement(Truncate, null, children));
};

var ListItemInternal = forwardRef(function (props, ref) {
  var children = props.children,
      className = props.className,
      color = props.color,
      current = props.current,
      propsDensity = props.density,
      description = props.description,
      detail = props.detail,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      href = props.href,
      icon = props.icon,
      itemRole = props.itemRole,
      propsKeyColor = props.keyColor,
      onBlur = props.onBlur,
      onClick = props.onClick,
      onKeyDown = props.onKeyDown,
      onKeyUp = props.onKeyUp,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      rel = props.rel,
      role = props.role,
      selected = props.selected,
      target = props.target,
      truncate = props.truncate,
      restProps = _objectWithoutProperties(props, ["children", "className", "color", "current", "density", "description", "detail", "disabled", "href", "icon", "itemRole", "keyColor", "onBlur", "onClick", "onKeyDown", "onKeyUp", "onMouseEnter", "onMouseLeave", "rel", "role", "selected", "target", "truncate"]);

  var _useContext = useContext(ListItemContext),
      contextDensity = _useContext.density,
      iconGutter = _useContext.iconGutter,
      contextKeyColor = _useContext.keyColor;

  var itemDimensions = listItemDimensions(propsDensity || contextDensity);
  var keyColor = undefinedCoalesce([propsKeyColor, contextKeyColor]);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      focusVisible = _useState2[0],
      setFocusVisible = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      hovered = _useState4[0],
      setHovered = _useState4[1];

  var labelColor = disabled ? 'text1' : color;
  var descriptionColor = disabled ? 'text1' : 'text2';

  var handleOnBlur = function handleOnBlur(event) {
    setFocusVisible(false);
    onBlur && onBlur(event);
  };

  var handleOnClick = function handleOnClick(event) {
    setFocusVisible(false);
    onClick && onClick(event);
  };

  var handleOnKeyDown = function handleOnKeyDown(event) {
    onKeyDown && onKeyDown(event);
    setFocusVisible(true);
  };

  var handleOnKeyUp = function handleOnKeyUp(event) {
    onKeyUp && onKeyUp(event);
    setFocusVisible(true);
  };

  var handleOnMouseEnter = useWrapEvent(function () {
    return setHovered(true);
  }, onMouseEnter);
  var handleOnMouseLeave = useWrapEvent(function () {
    return setHovered(false);
  }, onMouseLeave);

  if (disabled && itemRole === 'link') {
    console.warn('itemRole="link" and disabled cannot be combined - use itemRole="button" if you need to offer a disabled ListItem');
  }

  var Wrapper = truncate ? TruncateWrapper : Text;
  var renderedChildren = React.createElement(Wrapper, {
    color: labelColor,
    fontSize: itemDimensions.labelFontSize,
    lineHeight: itemDimensions.labelLineHeight
  }, children);
  var renderedDescription = React.createElement(Wrapper, {
    color: descriptionColor,
    fontSize: itemDimensions.descriptionFontSize,
    lineHeight: itemDimensions.descriptionLineHeight
  }, description);

  var _getDetailOptions = getDetailOptions(detail),
      accessory = _getDetailOptions.accessory,
      content = _getDetailOptions.content,
      hoverDisclosure = _getDetailOptions.hoverDisclosure;

  var renderedDetail = detail && React.createElement(HoverDisclosure, {
    visible: !hoverDisclosure
  }, React.createElement(ListItemDetail, {
    pr: accessory ? itemDimensions.px : '0'
  }, content));
  var statefulProps = {
    current: current,
    disabled: disabled,
    hovered: hovered,
    keyColor: keyColor,
    selected: selected
  };

  var LabelCreator = function LabelCreator(_ref2) {
    var children = _ref2.children,
        className = _ref2.className;
    return React.createElement(ListItemLabel, _extends({
      itemRole: itemRole,
      "aria-current": current,
      "aria-selected": selected,
      className: className,
      height: itemDimensions.height,
      href: href,
      onBlur: handleOnBlur,
      onClick: disabled ? undefined : handleOnClick,
      onKeyDown: handleOnKeyDown,
      onKeyUp: handleOnKeyUp,
      rel: createSafeRel(rel, target),
      role: role || 'listitem',
      target: target,
      tabIndex: -1
    }, statefulProps), children);
  };

  var Layout = accessory ? ListItemLayoutAccessory : ListItemLayout;
  var listItemContent = React.createElement(Layout, {
    color: color,
    description: renderedDescription,
    detail: renderedDetail,
    disabled: disabled,
    icon: icon || iconGutter && React.createElement(IconPlaceholder, null),
    iconGap: itemDimensions.iconGap,
    iconSize: itemDimensions.iconSize,
    labelCreator: LabelCreator,
    px: itemDimensions.px,
    py: itemRole === 'none' ? 'none' : itemDimensions.py
  }, renderedChildren);
  return React.createElement(HoverDisclosureContext.Provider, {
    value: {
      visible: hovered
    }
  }, React.createElement(ListItemWrapper, _extends({
    className: className,
    description: description,
    disabled: disabled,
    focusVisible: focusVisible,
    onMouseEnter: handleOnMouseEnter,
    onMouseLeave: handleOnMouseLeave,
    ref: ref
  }, itemDimensions, restProps), listItemContent));
});
ListItemInternal.displayName = 'ListItemInternal';
export var ListItem = styled(ListItemInternal).withConfig({
  displayName: "ListItem",
  componentId: "dmbyyb-0"
})([""]);
//# sourceMappingURL=ListItem.js.map