function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import React from 'react';
import styled from 'styled-components';
import { Flex } from '../Layout';
import { listItemIconCSS } from './ListItemLayout';
import { listItemPadding } from './utils';
export var ListItemLayoutAccessoryInternal = function ListItemLayoutAccessoryInternal(_ref) {
  var children = _ref.children,
      className = _ref.className,
      labelCreator = _ref.labelCreator,
      description = _ref.description,
      detail = _ref.detail,
      icon = _ref.icon;
  var content = React.createElement(React.Fragment, null, icon, React.createElement(Flex, {
    flexDirection: "column",
    minWidth: 0,
    flexGrow: 1
  }, children, description));
  return React.createElement(React.Fragment, null, labelCreator({
    children: content,
    className: className || ''
  }), detail);
};
export var ListItemLayoutAccessory = styled(ListItemLayoutAccessoryInternal).attrs(function (_ref2) {
  var color = _ref2.color,
      disabled = _ref2.disabled;
  return {
    color: disabled ? 'text1' : color || 'text1'
  };
}).withConfig({
  displayName: "ListItemLayoutAccessory",
  componentId: "sc-2sqfqp-0"
})(["", " ", ""], function (props) {
  return listItemPadding(_objectSpread({}, props));
}, listItemIconCSS);
//# sourceMappingURL=ListItemLayoutAccessory.js.map