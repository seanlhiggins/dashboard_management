function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.object.assign.js";
import React, { Children, forwardRef, isValidElement, useMemo } from 'react';
import styled from 'styled-components';
import { reset, omitStyledProps } from '@looker/design-tokens';
import { useArrowKeyNav, useWindow } from '../utils';
import { ListItemContext } from './ListItemContext';
import { listItemDimensions } from './utils';

var getListItemHeight = function getListItemHeight(child, height) {
  if (isValidElement(child) && child.props.description) {
    return height + 16;
  }

  return height;
};

export var ListInternal = forwardRef(function (_ref, forwardedRef) {
  var children = _ref.children,
      _ref$density = _ref.density,
      density = _ref$density === void 0 ? 0 : _ref$density,
      disabled = _ref.disabled,
      _ref$iconGutter = _ref.iconGutter,
      iconGutter = _ref$iconGutter === void 0 ? false : _ref$iconGutter,
      keyColor = _ref.keyColor,
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus,
      onKeyDown = _ref.onKeyDown,
      role = _ref.role,
      windowing = _ref.windowing,
      props = _objectWithoutProperties(_ref, ["children", "density", "disabled", "iconGutter", "keyColor", "onBlur", "onFocus", "onKeyDown", "role", "windowing"]);

  var childArray = useMemo(function () {
    return Children.toArray(children);
  }, [children]);

  var _listItemDimensions = listItemDimensions(density !== undefined ? density : 0),
      height = _listItemDimensions.height;

  if (windowing === undefined) {
    if (childArray.length > 100) {
      windowing = 'fixed';
    } else {
      windowing = 'none';
    }
  }

  var _useWindow = useWindow({
    childHeight: childArray[0] ? getListItemHeight(childArray[0], height) : 0,
    children: children,
    enabled: windowing !== 'none',
    ref: forwardedRef,
    spacerTag: 'li'
  }),
      content = _useWindow.content,
      ref = _useWindow.ref;

  var navProps = useArrowKeyNav({
    onBlur: onBlur,
    onFocus: onFocus,
    onKeyDown: onKeyDown,
    ref: ref
  });
  var context = {
    density: density,
    iconGutter: iconGutter,
    keyColor: keyColor
  };
  return React.createElement(ListItemContext.Provider, {
    value: context
  }, React.createElement("ul", _extends({
    tabIndex: -1,
    role: role || 'list'
  }, omitStyledProps(props), navProps), content));
});
export var List = styled(ListInternal).withConfig({
  displayName: "List",
  componentId: "q1s69i-0"
})(["", " height:100%;list-style:none;overflow:auto;"], reset);
//# sourceMappingURL=List.js.map