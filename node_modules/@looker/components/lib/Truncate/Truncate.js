function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.array.join.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState, useCallback } from 'react';
import styled from 'styled-components';
import { width as widthHelper } from 'styled-system';
import { useIsTruncated } from '../utils/useIsTruncated';
import { useTooltip } from '../Tooltip';

var TruncateLayout = function TruncateLayout(_ref) {
  var children = _ref.children,
      propsClassName = _ref.className,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? '100%' : _ref$width;

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      domNode = _useState2[0],
      setDomNode = _useState2[1];

  var isTruncated = useIsTruncated(domNode);
  var textRef = useCallback(function (node) {
    setDomNode(node);
  }, []);

  var _useTooltip = useTooltip({
    content: isTruncated ? children : undefined,
    invert: false,
    placement: 'top-start',
    textAlign: 'left',
    triggerElement: domNode,
    width: 'auto'
  }),
      tooltip = _useTooltip.tooltip,
      domProps = _useTooltip.domProps;

  var tooltipClassName = domProps.className,
      otherDomProps = _objectWithoutProperties(domProps, ["className"]);

  var className = [tooltipClassName, propsClassName].join(' ');
  return React.createElement(React.Fragment, null, tooltip, React.createElement(TextStyle, _extends({}, otherDomProps, {
    className: className,
    ref: textRef,
    width: width
  }), children));
};

var TextStyle = styled.span.withConfig({
  displayName: "Truncate__TextStyle",
  componentId: "sc-1y9fe07-0"
})(["display:block;overflow-x:hidden;text-overflow:ellipsis;", " white-space:nowrap;:focus-within{a{outline:none;}}"], widthHelper);
export var Truncate = styled(TruncateLayout).withConfig({
  displayName: "Truncate",
  componentId: "sc-1y9fe07-1"
})([""]);
//# sourceMappingURL=Truncate.js.map