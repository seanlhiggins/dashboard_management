import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import styled from 'styled-components';
import React, { useContext, useRef, useState } from 'react';
import { Accordion, AccordionContent, AccordionDisclosure } from '../Accordion';
import { undefinedCoalesce, useWrapEvent } from '../utils';
import { List } from '../List';
import { listItemDimensions, getDetailOptions } from '../List/utils';
import { TreeContext } from './TreeContext';
import { indicatorDefaults } from './utils';
import { TreeItemInner, TreeItemInnerDetail, TreeStyle } from './TreeStyle';

var TreeLayout = function TreeLayout(_ref) {
  var branchFontWeight = _ref.branchFontWeight,
      propsBorder = _ref.border,
      children = _ref.children,
      className = _ref.className,
      color = _ref.color,
      propsDensity = _ref.density,
      propsDetail = _ref.detail,
      disabled = _ref.disabled,
      dividers = _ref.dividers,
      icon = _ref.icon,
      propsKeyColor = _ref.keyColor,
      propsLabel = _ref.label,
      onClick = _ref.onClick,
      onKeyUp = _ref.onKeyUp,
      onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      selected = _ref.selected,
      truncate = _ref.truncate,
      restProps = _objectWithoutProperties(_ref, ["branchFontWeight", "border", "children", "className", "color", "density", "detail", "disabled", "dividers", "icon", "keyColor", "label", "onClick", "onKeyUp", "onMouseEnter", "onMouseLeave", "selected", "truncate"]);

  var detailRef = useRef(null);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      hovered = _useState2[0],
      setHovered = _useState2[1];

  var treeContext = useContext(TreeContext);
  var hasBorder = undefinedCoalesce([propsBorder, treeContext.border]);
  var useKeyColor = undefinedCoalesce([propsKeyColor, treeContext.keyColor]);
  var startingDepth = 0;
  var depth = treeContext.depth ? treeContext.depth : startingDepth;
  var density = propsDensity || treeContext.density;

  var _listItemDimensions = listItemDimensions(density),
      iconSize = _listItemDimensions.iconSize;

  var _getDetailOptions = getDetailOptions(propsDetail),
      accessory = _getDetailOptions.accessory,
      content = _getDetailOptions.content,
      hoverDisclosure = _getDetailOptions.hoverDisclosure;

  var handleDetailClick = function handleDetailClick(event) {
    if (accessory && detailRef.current && detailRef.current.contains(event.target)) {
      event.stopPropagation();
    }
  };

  var handleDetailKeyDown = function handleDetailKeyDown(event) {
    if (accessory && detailRef.current && detailRef.current.contains(event.target)) {
      event.stopPropagation();
    }
  };

  var handleMouseEnter = useWrapEvent(function () {
    return setHovered(true);
  }, onMouseEnter);
  var handleMouseLeave = useWrapEvent(function () {
    return setHovered(false);
  }, onMouseLeave);
  var detail = {
    content: React.createElement(TreeItemInnerDetail, {
      onClick: handleDetailClick,
      onKeyDown: handleDetailKeyDown,
      ref: detailRef
    }, content),
    options: {
      accessory: accessory,
      hoverDisclosure: hoverDisclosure
    }
  };
  var label = React.createElement(TreeItemInner, {
    color: color,
    density: density,
    detail: detail,
    disabled: disabled,
    icon: icon,
    truncate: truncate
  }, propsLabel);
  var indicatorColor = disabled ? 'text1' : color;
  var innerAccordion = React.createElement(Accordion, _extends({}, indicatorDefaults, restProps, {
    indicatorSize: iconSize
  }), React.createElement(AccordionDisclosure, {
    color: indicatorColor,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    py: "none"
  }, label), React.createElement(AccordionContent, null, React.createElement(List, {
    density: density
  }, children)));
  return React.createElement(TreeContext.Provider, {
    value: {
      border: hasBorder,
      density: density,
      depth: depth + 1,
      keyColor: useKeyColor
    }
  }, React.createElement(TreeStyle, {
    border: hasBorder,
    branchFontWeight: branchFontWeight,
    className: className,
    depth: depth,
    disabled: disabled,
    dividers: dividers,
    hovered: hovered,
    indicatorSize: iconSize,
    keyColor: useKeyColor,
    selected: selected
  }, innerAccordion));
};

export var Tree = styled(TreeLayout).withConfig({
  displayName: "Tree",
  componentId: "umxml-0"
})([""]);
//# sourceMappingURL=Tree.js.map