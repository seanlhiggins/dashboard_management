import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext } from 'react';
import styled from 'styled-components';
import { undefinedCoalesce } from '../utils';
import { ListItem } from '../List';
import { TreeContext } from './TreeContext';

var TreeItemLayout = function TreeItemLayout(_ref) {
  var children = _ref.children,
      propsDensity = _ref.density,
      propsKeyColor = _ref.keyColor,
      restProps = _objectWithoutProperties(_ref, ["children", "density", "keyColor"]);

  var _useContext = useContext(TreeContext),
      contextDensity = _useContext.density,
      contextKeyColor = _useContext.keyColor;

  var density = undefinedCoalesce([propsDensity, contextDensity]);
  var keyColor = undefinedCoalesce([propsKeyColor, contextKeyColor]);
  return React.createElement(ListItem, _extends({
    density: density,
    keyColor: keyColor
  }, restProps), children);
};

export var TreeItem = styled(TreeItemLayout).withConfig({
  displayName: "TreeItem",
  componentId: "sc-1dl3fv3-0"
})([""]);
//# sourceMappingURL=TreeItem.js.map