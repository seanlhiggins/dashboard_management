function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import "core-js/modules/es.array.reduce.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.string.trim.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { cloneElement, forwardRef, isValidElement } from 'react';
import { useForkedRef } from '../utils';
import { mergeHandlers } from '../utils/mergeHandlers';
import { useTooltip } from './useTooltip';

function isRenderProp(children) {
  return typeof children === 'function';
}

export var Tooltip = forwardRef(function (_ref, forwardedRef) {
  var ariaControls = _ref['aria-controls'],
      ariaExpanded = _ref['aria-expanded'],
      ariaHaspopup = _ref['aria-haspopup'],
      disabled = _ref.disabled,
      onClick = _ref.onClick,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["aria-controls", "aria-expanded", "aria-haspopup", "disabled", "onClick", "children"]);

  var _useTooltip = useTooltip(_objectSpread({
    disabled: disabled || ariaExpanded
  }, props)),
      domProps = _useTooltip.domProps,
      tooltip = _useTooltip.tooltip;

  var className = domProps.className,
      onBlur = domProps.onBlur,
      onFocus = domProps.onFocus,
      onMouseOut = domProps.onMouseOut,
      onMouseOver = domProps.onMouseOver,
      tooltipRef = domProps.ref,
      restDomProps = _objectWithoutProperties(domProps, ["className", "onBlur", "onFocus", "onMouseOut", "onMouseOver", "ref"]);

  var ref = useForkedRef(tooltipRef, forwardedRef);
  var target = children;

  if (isValidElement(children)) {
    var handlers = {
      onBlur: onBlur,
      onClick: onClick,
      onFocus: onFocus,
      onMouseOut: onMouseOut,
      onMouseOver: onMouseOver
    };
    var mergedHandlers = Object.keys(handlers).reduce(function (acc, key) {
      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, mergeHandlers(handlers[key], children.props[key])));
    }, {});
    target = cloneElement(children, _objectSpread(_objectSpread(_objectSpread({}, mergedHandlers), restDomProps), {}, {
      'aria-controls': ariaControls,
      'aria-expanded': ariaExpanded,
      'aria-haspopup': ariaHaspopup,
      className: "".concat(children.props.className || '', " ").concat(className).trim() || undefined,
      ref: ref
    }));
  } else if (isRenderProp(children)) {
    target = children(domProps);
  } else {
    console.warn("Element \"".concat(_typeof(target), "\" can't be used as target for Tooltip"));
  }

  return React.createElement(React.Fragment, null, tooltip, target);
});
//# sourceMappingURL=Tooltip.js.map