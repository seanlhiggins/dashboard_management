function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.object.assign.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.string.link.js";
import { reset, typography, omitStyledProps } from '@looker/design-tokens';
import omit from 'lodash/omit';
import styled from 'styled-components';
import React, { forwardRef } from 'react';
var noTabNab = 'noopener noreferrer';
var LinkLayout = forwardRef(function (_ref, ref) {
  var props = Object.assign({}, _ref);
  var rel = props.target === '_blank' ? props.rel ? "".concat(props.rel, " ").concat(noTabNab) : noTabNab : props.rel;
  return React.createElement("a", _extends({}, omit(omitStyledProps(props), 'keyColor', 'underline'), {
    ref: ref,
    rel: rel
  }));
});
LinkLayout.displayName = 'LinkLayout';
export var Link = styled(LinkLayout).withConfig({
  displayName: "Link",
  componentId: "sc-165dqum-0"
})(["", " ", " color:", ";text-decoration:", ";&[aria-expanded='true'],&:focus,&:hover,&:active,&.active,&:visited{color:", ";outline:none;text-decoration:underline;}"], reset, typography, function (_ref2) {
  var keyColor = _ref2.keyColor,
      colors = _ref2.theme.colors;
  return keyColor ? colors.key : colors.link;
}, function (_ref3) {
  var underline = _ref3.underline;
  return underline ? 'underline' : 'none';
}, function (_ref4) {
  var keyColor = _ref4.keyColor,
      colors = _ref4.theme.colors;
  return keyColor ? colors.keyInteractive : colors.linkInteractive;
});
//# sourceMappingURL=Link.js.map