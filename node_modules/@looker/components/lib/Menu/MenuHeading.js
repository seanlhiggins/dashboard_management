import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext, useRef } from 'react';
import styled from 'styled-components';
import { pickStyledProps } from '@looker/design-tokens';
import { Heading } from '../Text/Heading';
import { listItemDimensions } from '../List';
import { ListItemContext } from '../List/ListItemContext';
import { useElementVisibility } from './MenuHeading.hooks';

var MenuHeadingInternal = function MenuHeadingInternal(_ref) {
  var children = _ref.children,
      className = _ref.className,
      restProps = _objectWithoutProperties(_ref, ["children", "className"]);

  var labelShimRef = useRef();
  var isLabelShimVisible = useElementVisibility(labelShimRef);

  var _useContext = useContext(ListItemContext),
      density = _useContext.density;

  var _listItemDimensions = listItemDimensions(density),
      px = _listItemDimensions.px;

  return React.createElement(MenuHeadingWrapper, {
    className: className,
    renderBoxShadow: !isLabelShimVisible
  }, React.createElement("div", {
    ref: labelShimRef,
    style: {
      height: '0'
    }
  }), React.createElement(Heading, _extends({
    as: "h2",
    color: "text5",
    fontFamily: "brand",
    fontSize: "xsmall",
    fontWeight: "medium",
    lineHeight: "xsmall",
    px: px,
    py: "xsmall"
  }, pickStyledProps(restProps)), children));
};

export var MenuHeading = styled(MenuHeadingInternal).withConfig({
  displayName: "MenuHeading",
  componentId: "szhc1r-0"
})([""]);
var MenuHeadingWrapper = styled.li.withConfig({
  displayName: "MenuHeading__MenuHeadingWrapper",
  componentId: "szhc1r-1"
})(["background:", ";box-shadow:", ";position:sticky;top:-1px;"], function (_ref2) {
  var colors = _ref2.theme.colors;
  return colors.background;
}, function (_ref3) {
  var renderBoxShadow = _ref3.renderBoxShadow,
      colors = _ref3.theme.colors;
  return renderBoxShadow ? "0 4px 8px -2px ".concat(colors.ui2) : 'none';
});
//# sourceMappingURL=MenuHeading.js.map