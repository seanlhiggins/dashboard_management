import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import styled from 'styled-components';
import React, { forwardRef, useContext } from 'react';
import { size } from '@looker/design-tokens';
import { ArrowRight } from '@styled-icons/material/ArrowRight';
import { DialogContext } from '../Dialog';
import { ListItem } from '../List';
import { useForkedRef, useID } from '../utils';
import { ListItemContext } from '../List/ListItemContext';
import { listItemDimensions } from '../List/utils';
import { useNestedMenu } from './useNestedMenu';
var MenuItemInternal = forwardRef(function (_ref, forwardedRef) {
  var children = _ref.children,
      detail = _ref.detail,
      onClick = _ref.onClick,
      onKeyDown = _ref.onKeyDown,
      onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      nestedMenu = _ref.nestedMenu,
      props = _objectWithoutProperties(_ref, ["children", "detail", "onClick", "onKeyDown", "onMouseEnter", "onMouseLeave", "nestedMenu"]);

  var id = useID(props.id);

  var _useNestedMenu = useNestedMenu({
    id: id,
    nestedMenu: nestedMenu,
    onClick: onClick,
    onKeyDown: onKeyDown,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }),
      popover = _useNestedMenu.popover,
      _useNestedMenu$domPro = _useNestedMenu.domProps,
      nestedMenuOnClick = _useNestedMenu$domPro.onClick,
      nestedMenuRef = _useNestedMenu$domPro.ref,
      nestedMenuProps = _objectWithoutProperties(_useNestedMenu$domPro, ["onClick", "ref"]);

  var ref = useForkedRef(nestedMenuRef, forwardedRef);

  var _useContext = useContext(ListItemContext),
      density = _useContext.density;

  var _listItemDimensions = listItemDimensions(density),
      iconSize = _listItemDimensions.iconSize;

  if (detail && nestedMenu) {
    console.warn('The detail prop is not supported when nestedMenu is used.');
  }

  detail = nestedMenu ? React.createElement(NestedMenuIndicator, {
    size: iconSize
  }) : detail;

  var _useContext2 = useContext(DialogContext),
      closeModal = _useContext2.closeModal;

  var handleOnClick = function handleOnClick(event) {
    nestedMenuOnClick(event);

    if (closeModal && !event.defaultPrevented) {
      closeModal();
    }
  };

  return React.createElement(React.Fragment, null, React.createElement(ListItem, _extends({
    detail: detail,
    onClick: handleOnClick,
    ref: ref,
    role: "menuitem"
  }, props, nestedMenuProps), children), popover);
});
MenuItemInternal.displayName = 'MenuItemInternal';
export var MenuItem = styled(MenuItemInternal).withConfig({
  displayName: "MenuItem",
  componentId: "sc-13x060p-0"
})([""]);
var NestedMenuIndicator = styled(ArrowRight).withConfig({
  displayName: "MenuItem__NestedMenuIndicator",
  componentId: "sc-13x060p-1"
})(["color:", ";", ""], function (_ref2) {
  var theme = _ref2.theme;
  return theme.colors.text1;
}, size);
//# sourceMappingURL=MenuItem.js.map