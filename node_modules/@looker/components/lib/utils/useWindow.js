import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { Children, useEffect, useMemo, useReducer } from 'react';
import { getWindowedListBoundaries } from './getWindowedListBoundaries';
import { useCallbackRef } from './useCallbackRef';
import { useMeasuredElement } from './useMeasuredElement';
import { useScrollPosition } from './useScrollPosition';
var initialState = {
  afterHeight: 0,
  beforeHeight: 0,
  end: 0,
  scrollBottom: 0,
  scrollTop: 0,
  start: 0
};
var bufferHeight = 1000;

var reducer = function reducer(state, action) {
  var beforeHeight = state.beforeHeight,
      afterHeight = state.afterHeight,
      start = state.start,
      end = state.end;
  var _action$payload = action.payload,
      scrollPosition = _action$payload.scrollPosition,
      height = _action$payload.height,
      totalHeight = _action$payload.totalHeight,
      childHeightLadder = _action$payload.childHeightLadder;
  var scrollTop = scrollPosition;
  var scrollBottom = scrollPosition + height;

  if (!childHeightLadder[start] || beforeHeight !== childHeightLadder[start]) {
    start = 0;
  }

  if (!childHeightLadder[end] || afterHeight !== totalHeight - childHeightLadder[end + 1]) {
    end = childHeightLadder.length - 1;
  }

  var bufferedTop = Math.max(0, scrollTop - bufferHeight);
  var bufferedBottom = Math.min(scrollBottom + bufferHeight, totalHeight);

  while (childHeightLadder[start] < bufferedTop) {
    start += 1;
  }

  if (start > 0) {
    while (childHeightLadder[start] > bufferedTop) {
      start -= 1;
    }
  }

  if (end + 1 < childHeightLadder.length) {
    while (childHeightLadder[end] < bufferedBottom) {
      end += 1;
    }
  }

  while (childHeightLadder[end] > bufferedBottom) {
    end -= 1;
  }

  return {
    afterHeight: end + 1 === childHeightLadder.length ? 0 : totalHeight - childHeightLadder[end + 1],
    beforeHeight: childHeightLadder[start],
    end: end,
    scrollBottom: scrollBottom,
    scrollTop: scrollTop,
    start: start
  };
};

export var useWindow = function useWindow(_ref) {
  var children = _ref.children,
      enabled = _ref.enabled,
      childHeight = _ref.childHeight,
      ref = _ref.ref,
      _ref$spacerTag = _ref.spacerTag,
      spacerTag = _ref$spacerTag === void 0 ? 'div' : _ref$spacerTag;
  var childArray = useMemo(function () {
    return Children.toArray(children);
  }, [children]);

  var _useMemo = useMemo(function () {
    var sum = 0;
    var ladder = [];

    if (typeof childHeight === 'function') {
      childArray.forEach(function (child, index) {
        ladder.push(sum);
        sum += childHeight(child, index);
      });
    }

    return [sum, ladder];
  }, [childHeight, childArray]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      totalHeight = _useMemo2[0],
      childHeightLadder = _useMemo2[1];

  var _useCallbackRef = useCallbackRef(ref),
      _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
      containerElement = _useCallbackRef2[0],
      callbackRef = _useCallbackRef2[1];

  var _useMeasuredElement = useMeasuredElement(enabled ? containerElement : null),
      _useMeasuredElement2 = _slicedToArray(_useMeasuredElement, 1),
      height = _useMeasuredElement2[0].height;

  var scrollPosition = useScrollPosition(enabled ? containerElement : null);

  var _useReducer = useReducer(reducer, initialState),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      variable = _useReducer2[0],
      dispatch = _useReducer2[1];

  useEffect(function () {
    if (totalHeight > 0) {
      if (enabled) {
        dispatch({
          payload: {
            childHeightLadder: childHeightLadder,
            height: height,
            scrollPosition: scrollPosition,
            totalHeight: totalHeight
          },
          type: 'CHANGE'
        });
      }
    }
  }, [enabled, childHeightLadder, height, scrollPosition, totalHeight]);
  var fixed = useMemo(function () {
    if (typeof childHeight === 'number') {
      return getWindowedListBoundaries({
        enabled: enabled,
        height: height,
        itemHeight: childHeight,
        length: childArray.length,
        scrollPosition: scrollPosition
      });
    }

    return false;
  }, [enabled, childArray, height, childHeight, scrollPosition]);

  var _ref2 = fixed || variable,
      start = _ref2.start,
      end = _ref2.end,
      beforeHeight = _ref2.beforeHeight,
      afterHeight = _ref2.afterHeight;

  var Spacer = spacerTag;
  var before = beforeHeight > 0 ? React.createElement(Spacer, {
    style: {
      height: "".concat(beforeHeight, "px")
    },
    "data-testid": "before"
  }) : null;
  var after = afterHeight > 0 ? React.createElement(Spacer, {
    style: {
      height: "".concat(afterHeight, "px")
    },
    "data-testid": "after"
  }) : null;
  return {
    containerElement: containerElement,
    content: enabled ? React.createElement(React.Fragment, null, before, childArray.slice(start, end + 1), after) : childArray,
    ref: callbackRef
  };
};
//# sourceMappingURL=useWindow.js.map