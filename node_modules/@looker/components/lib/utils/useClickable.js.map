{"version":3,"sources":["../../src/utils/useClickable.ts"],"names":["useState","useMemo","useClickable","disabled","onBlur","onClick","onKeyUp","role","focusVisible","setFocusVisible","e","shouldHandle","currentTarget","target","key","undefined","tabIndex"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAIEA,QAJF,EAKEC,OALF,QAMO,OANP;AAmCA,OAAO,SAASC,YAAT,OAMyC;AAAA,MAL9CC,QAK8C,QAL9CA,QAK8C;AAAA,MAJ9CC,OAI8C,QAJ9CA,MAI8C;AAAA,MAH9CC,QAG8C,QAH9CA,OAG8C;AAAA,MAF9CC,QAE8C,QAF9CA,OAE8C;AAAA,MAD9CC,IAC8C,QAD9CA,IAC8C;;AAAA,kBACNP,QAAQ,CAAC,KAAD,CADF;AAAA;AAAA,MACvCQ,YADuC;AAAA,MACzBC,eADyB;;AAG9C,SAAOR,OAAO,CACZ;AAAA,WAAO;AACLE,MAAAA,QAAQ,EAARA,QADK;AAELK,MAAAA,YAAY,EAAZA,YAFK;AAGLJ,MAAAA,MAAM,EAAE,gBAACM,CAAD,EAAsB;AAC5BN,QAAAA,OAAM,SAAN,IAAAA,OAAM,WAAN,YAAAA,OAAM,CAAGM,CAAH,CAAN;AACAD,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD,OANI;AAOLJ,MAAAA,OAAO,EAAE,iBAACK,CAAD,EAAuC;AAC9C,YAAI,CAACP,QAAL,EAAe;AACbE,UAAAA,QAAO,SAAP,IAAAA,QAAO,WAAP,YAAAA,QAAO,CAAGK,CAAH,CAAP;AACAD,UAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,OAZI;AAaLH,MAAAA,OAAO,EAAE,iBAACI,CAAD,EAAyB;AAChC,YAAMC,YAAY,GAAG,CAACR,QAAD,IAAaO,CAAC,CAACE,aAAF,KAAoBF,CAAC,CAACG,MAAxD;;AACA,YAAIF,YAAJ,EAAkB;AAChB,kBAAQD,CAAC,CAACI,GAAV;AACE,iBAAK,OAAL;AACA,iBAAK,GAAL;AACET,cAAAA,QAAO,SAAP,IAAAA,QAAO,WAAP,YAAAA,QAAO,CAAGK,CAAH,CAAP;AACA;AAJJ;;AAMAD,UAAAA,eAAe,CAAC,IAAD,CAAf;AACD;;AACDH,QAAAA,QAAO,SAAP,IAAAA,QAAO,WAAP,YAAAA,QAAO,CAAGI,CAAH,CAAP;AACD,OAzBI;AA4BLH,MAAAA,IAAI,EAAEA,IAAI,KAAKF,QAAO,GAAG,QAAH,GAAcU,SAA1B,CA5BL;AA6BLC,MAAAA,QAAQ,EAAEb,QAAQ,GAAGY,SAAH,GAAe;AA7B5B,KAAP;AAAA,GADY,EAgCZ,CAACZ,QAAD,EAAWK,YAAX,EAAyBJ,OAAzB,EAAiCC,QAAjC,EAA0CC,QAA1C,EAAmDC,IAAnD,CAhCY,CAAd;AAkCD","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport { CompatibleHTMLProps } from '@looker/design-tokens'\nimport {\n  FocusEvent,\n  KeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  useState,\n  useMemo,\n} from 'react'\n\n// These 2 are helper interfaces for components using this hook\nexport interface FocusVisibleProps {\n  focusVisible: boolean\n}\n\nexport type GenericOnClick<E extends HTMLElement> = (\n  e: ReactMouseEvent<E, MouseEvent> | KeyboardEvent<E>\n) => void\n\nexport interface GenericClickProps<E extends HTMLElement>\n  extends Omit<CompatibleHTMLProps<E>, 'onClick'> {\n  onClick?: GenericOnClick<E>\n}\n\ntype Attributes = 'disabled' | 'onBlur' | 'onKeyUp' | 'role'\n\nexport interface UseClickableProps<E extends HTMLElement>\n  extends Pick<CompatibleHTMLProps<E>, Attributes>,\n    Pick<GenericClickProps<E>, 'onClick'> {}\n\nexport interface UseClickableResult<E extends HTMLElement>\n  extends Pick<CompatibleHTMLProps<E>, Attributes | 'onClick' | 'tabIndex'>,\n    FocusVisibleProps {}\n/**\n * This hook provides keyboard accessibility for any component that renders a non-button element\n * that is both focus-able and clickable. The component should handle styling for focusVisible.\n */\nexport function useClickable<E extends HTMLElement>({\n  disabled,\n  onBlur,\n  onClick,\n  onKeyUp,\n  role,\n}: UseClickableProps<E>): UseClickableResult<E> {\n  const [focusVisible, setFocusVisible] = useState(false)\n\n  return useMemo(\n    () => ({\n      disabled,\n      focusVisible,\n      onBlur: (e: FocusEvent<E>) => {\n        onBlur?.(e)\n        setFocusVisible(false)\n      },\n      onClick: (e: ReactMouseEvent<E, MouseEvent>) => {\n        if (!disabled) {\n          onClick?.(e)\n          setFocusVisible(false)\n        }\n      },\n      onKeyUp: (e: KeyboardEvent<E>) => {\n        const shouldHandle = !disabled && e.currentTarget === e.target\n        if (shouldHandle) {\n          switch (e.key) {\n            case 'Enter':\n            case ' ':\n              onClick?.(e)\n              break\n          }\n          setFocusVisible(true)\n        }\n        onKeyUp?.(e)\n      },\n      // if onClick is used, role should be 'button' unless otherwise specified\n      // otherwise undefined b/c depending on usage, 'button' could be misleading\n      role: role || (onClick ? 'button' : undefined),\n      tabIndex: disabled ? undefined : 0,\n    }),\n    [disabled, focusVisible, onBlur, onClick, onKeyUp, role]\n  )\n}\n"],"file":"useClickable.js"}