import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

var _dateFnLocaleMap;

import "core-js/modules/es.parse-int.js";
import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.object.define-property.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import format from 'date-fns-tz/format';
import utcToZonedTime from 'date-fns-tz/utcToZonedTime';
import isValid from 'date-fns/isValid';
import parse from 'date-fns/parse';
import ar from 'date-fns/locale/ar-SA';
import de from 'date-fns/locale/de';
import en from 'date-fns/locale/en-US';
import es from 'date-fns/locale/es';
import fr from 'date-fns/locale/fr';
import it from 'date-fns/locale/it';
import ja from 'date-fns/locale/ja';
import ko from 'date-fns/locale/ko';
import nl from 'date-fns/locale/nl';
import pl from 'date-fns/locale/pl';
import pt from 'date-fns/locale/pt';
import ptBr from 'date-fns/locale/pt-BR';
import ru from 'date-fns/locale/ru';
import sv from 'date-fns/locale/sv';
import tr from 'date-fns/locale/tr';
import zhCn from 'date-fns/locale/zh-CN';
import zhTw from 'date-fns/locale/zh-TW';
export var Locales;

(function (Locales) {
  Locales["Arabic"] = "ar";
  Locales["German"] = "de";
  Locales["English"] = "en";
  Locales["Spanish"] = "es";
  Locales["French"] = "fr";
  Locales["Italian"] = "it";
  Locales["Japanese"] = "ja";
  Locales["Korean"] = "ko";
  Locales["Dutch"] = "nl";
  Locales["Polish"] = "pl";
  Locales["Portuguese"] = "pt";
  Locales["PortugueseBrazil"] = "pt-br";
  Locales["Russian"] = "ru";
  Locales["Swedish"] = "sv";
  Locales["Turkish"] = "tr";
  Locales["Chinese"] = "zh-cn";
  Locales["ChineseTaiwan"] = "zh-tw";
})(Locales || (Locales = {}));

export var dateFnLocaleMap = (_dateFnLocaleMap = {}, _defineProperty(_dateFnLocaleMap, Locales.Arabic, ar), _defineProperty(_dateFnLocaleMap, Locales.German, de), _defineProperty(_dateFnLocaleMap, Locales.English, en), _defineProperty(_dateFnLocaleMap, Locales.Spanish, es), _defineProperty(_dateFnLocaleMap, Locales.French, fr), _defineProperty(_dateFnLocaleMap, Locales.Italian, it), _defineProperty(_dateFnLocaleMap, Locales.Japanese, ja), _defineProperty(_dateFnLocaleMap, Locales.Korean, ko), _defineProperty(_dateFnLocaleMap, Locales.Dutch, nl), _defineProperty(_dateFnLocaleMap, Locales.Polish, pl), _defineProperty(_dateFnLocaleMap, Locales.Portuguese, pt), _defineProperty(_dateFnLocaleMap, Locales.PortugueseBrazil, ptBr), _defineProperty(_dateFnLocaleMap, Locales.Russian, ru), _defineProperty(_dateFnLocaleMap, Locales.Turkish, tr), _defineProperty(_dateFnLocaleMap, Locales.Swedish, sv), _defineProperty(_dateFnLocaleMap, Locales.Chinese, zhCn), _defineProperty(_dateFnLocaleMap, Locales.ChineseTaiwan, zhTw), _dateFnLocaleMap);
export var formatDateString = function formatDateString(date) {
  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Locales.English;
  var stringFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'P';
  var timeZone = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;

  if (!date) {
    return '';
  }

  var renderedDate = timeZone ? utcToZonedTime(date, timeZone) : date;
  return format(renderedDate, stringFormat, _objectSpread({
    locale: dateFnLocaleMap[locale]
  }, timeZone && {
    timeZone: timeZone
  }));
};
export var formatYear = function formatYear(date) {
  var year = date.getFullYear();

  if (year < 100) {
    return year + 2000;
  } else if (year < 1000) {
    return parseInt("".concat(year, "0"));
  }

  return year;
};
export var parseDateFromString = function parseDateFromString(value) {
  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Locales.English;
  var parsedValue = parse(value, 'P', new Date(), {
    locale: dateFnLocaleMap[locale]
  });
  parsedValue.setFullYear(formatYear(parsedValue));
  return isValid(parsedValue) && parsedValue;
};
//# sourceMappingURL=i18n.js.map