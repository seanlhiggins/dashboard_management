import React, { ReactChild, Ref } from 'react';
export declare type ChildHeightFunction = (child: ReactChild, index: number) => number;
export declare type WindowSpacerTag = 'div' | 'li' | 'tr';
export interface UseWindowProps<E extends HTMLElement> {
    enabled?: boolean;
    children?: JSX.Element | JSX.Element[];
    childHeight: number | ChildHeightFunction;
    spacerTag?: WindowSpacerTag;
    ref?: Ref<E>;
}
export declare const useWindow: <E extends HTMLElement = HTMLElement>({ children, enabled, childHeight, ref, spacerTag, }: UseWindowProps<E>) => {
    containerElement: E | null;
    content: JSX.Element | (string | number | {} | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal)[];
    ref: (node: E | null) => void;
};
