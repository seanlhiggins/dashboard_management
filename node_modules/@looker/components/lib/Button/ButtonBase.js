import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { buttonShadow, reset, space, shouldForwardProp } from '@looker/design-tokens';
import { StyledIconBase } from '@styled-icons/styled-icon';
import React, { forwardRef, useState } from 'react';
import styled, { css } from 'styled-components';
import { minWidth, maxWidth, width } from 'styled-system';
import { buttonSize, buttonIconSizeMap, buttonPadding } from './size';
import { buttonIcon } from './icon';
export var buttonCSS = function buttonCSS(color, focusVisible) {
  return css(["", " ", " ", " ", " ", " align-items:center;border-radius:", ";cursor:pointer;display:inline-flex;font-family:", ";font-weight:", ";justify-content:center;line-height:1;outline:none;transition:border 80ms;vertical-align:middle;white-space:nowrap;&[disabled]{cursor:default;filter:grayscale(0.3);opacity:0.25;}", " ", ""], reset, maxWidth, minWidth, width, focusVisible && buttonShadow(color), function (_ref) {
    var theme = _ref.theme;
    return theme.radii.medium;
  }, function (_ref2) {
    var theme = _ref2.theme;
    return theme.fonts.brand;
  }, function (_ref3) {
    var theme = _ref3.theme;
    return theme.fontWeights.medium;
  }, buttonSize, space);
};
export var buttonIconSize = css(["", "{height:", ";width:", ";}"], StyledIconBase, function (_ref4) {
  var theme = _ref4.theme,
      _ref4$size = _ref4.size,
      size = _ref4$size === void 0 ? 'medium' : _ref4$size;
  return theme.sizes[buttonIconSizeMap[size]];
}, function (_ref5) {
  var theme = _ref5.theme,
      _ref5$size = _ref5.size,
      size = _ref5$size === void 0 ? 'medium' : _ref5$size;
  return theme.sizes[buttonIconSizeMap[size]];
});
var ButtonOuter = styled.button.withConfig({
  shouldForwardProp: shouldForwardProp
}).attrs(function (_ref6) {
  var _ref6$color = _ref6.color,
      color = _ref6$color === void 0 ? 'key' : _ref6$color;
  return {
    color: color
  };
}).withConfig({
  displayName: "ButtonBase__ButtonOuter",
  componentId: "sc-1bpio6j-0"
})(["", " ", ""], function (_ref7) {
  var color = _ref7.color,
      focusVisible = _ref7.focusVisible;
  return buttonCSS(color, focusVisible);
}, function (_ref8) {
  var fullWidth = _ref8.fullWidth;
  return fullWidth && "width: 100%;";
});
var ButtonJSX = forwardRef(function (props, ref) {
  var children = props.children,
      iconBefore = props.iconBefore,
      iconAfter = props.iconAfter,
      onBlur = props.onBlur,
      onKeyUp = props.onKeyUp,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      restProps = _objectWithoutProperties(props, ["children", "iconBefore", "iconAfter", "onBlur", "onKeyUp", "size"]);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocusVisible = _useState2[0],
      setFocusVisible = _useState2[1];

  var handleOnKeyUp = function handleOnKeyUp(event) {
    setFocusVisible(true);
    onKeyUp && onKeyUp(event);
  };

  var handleOnBlur = function handleOnBlur(event) {
    setFocusVisible(false);
    onBlur && onBlur(event);
  };

  return React.createElement(ButtonOuter, _extends({}, restProps, {
    size: size,
    focusVisible: isFocusVisible,
    onKeyUp: handleOnKeyUp,
    onBlur: handleOnBlur,
    ref: ref,
    px: buttonPadding(!!(iconBefore || iconAfter), size)
  }), iconBefore, children, iconAfter);
});
ButtonJSX.displayName = 'ButtonJSX';
export var GenericButtonBase = styled(ButtonJSX).withConfig({
  displayName: "ButtonBase__GenericButtonBase",
  componentId: "sc-1bpio6j-1"
})([""]);
export var ButtonBase = styled(GenericButtonBase).withConfig({
  displayName: "ButtonBase",
  componentId: "sc-1bpio6j-2"
})(["", " ", ""], buttonIcon, buttonIconSize);
//# sourceMappingURL=ButtonBase.js.map