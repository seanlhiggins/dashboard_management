function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.string.trim.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import some from 'lodash/some';
import isFunction from 'lodash/isFunction';
import styled, { css } from 'styled-components';
import { reset, space, shouldForwardProp } from '@looker/design-tokens';
import React, { forwardRef } from 'react';
import { Icon } from '../Icon';
import { useTooltip } from '../Tooltip';
import { useForkedRef, useWrapEvent } from '../utils';
import { VisuallyHidden } from '../VisuallyHidden';
import { GenericButtonBase, buttonCSS } from './ButtonBase';
import { iconButtonColor } from './iconButtonColor';
import { iconButtonIconSizeMap, buttonSizeMap } from './size';
export var IconButtonStyle = styled.button.withConfig({
  shouldForwardProp: shouldForwardProp
}).attrs(function (_ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'button' : _ref$type;
  return {
    type: type
  };
}).withConfig({
  displayName: "IconButton__IconButtonStyle",
  componentId: "n9jti8-0"
})(["", " height:auto;"], function (_ref2) {
  var focusVisible = _ref2.focusVisible;
  return buttonCSS('neutral', focusVisible);
});
var IconButtonComponent = forwardRef(function (props, forwardRef) {
  var ariaExpanded = props['aria-expanded'],
      className = props.className,
      icon = props.icon,
      id = props.id,
      _props$size = props.size,
      size = _props$size === void 0 ? 'xsmall' : _props$size,
      label = props.label,
      toggle = props.toggle,
      tooltipDisabled = props.tooltipDisabled,
      tooltipPlacement = props.tooltipPlacement,
      tooltipTextAlign = props.tooltipTextAlign,
      tooltipWidth = props.tooltipWidth,
      propsOnFocus = props.onFocus,
      propsOnBlur = props.onBlur,
      propsOnMouseOver = props.onMouseOver,
      propsOnMouseOut = props.onMouseOut,
      rest = _objectWithoutProperties(props, ["aria-expanded", "className", "icon", "id", "size", "label", "toggle", "tooltipDisabled", "tooltipPlacement", "tooltipTextAlign", "tooltipWidth", "onFocus", "onBlur", "onMouseOver", "onMouseOut"]);

  var hasOuterTooltip = some([propsOnFocus, propsOnBlur, propsOnMouseOver, propsOnMouseOut], isFunction);

  var _useTooltip = useTooltip({
    content: label,
    disabled: tooltipDisabled || hasOuterTooltip || ariaExpanded === true,
    id: id ? "".concat(id, "-tooltip") : undefined,
    placement: tooltipPlacement,
    textAlign: tooltipTextAlign,
    width: tooltipWidth
  }),
      _useTooltip$domProps = _useTooltip.domProps,
      ariaDescribedBy = _useTooltip$domProps['aria-describedby'],
      tooltipClassName = _useTooltip$domProps.className,
      ref = _useTooltip$domProps.ref,
      onFocus = _useTooltip$domProps.onFocus,
      onBlur = _useTooltip$domProps.onBlur,
      onMouseOver = _useTooltip$domProps.onMouseOver,
      onMouseOut = _useTooltip$domProps.onMouseOut,
      tooltip = _useTooltip.tooltip;

  var eventHandlers = {
    onBlur: useWrapEvent(onBlur, propsOnBlur),
    onFocus: useWrapEvent(onFocus, propsOnFocus),
    onMouseOut: useWrapEvent(onMouseOut, propsOnMouseOut),
    onMouseOver: useWrapEvent(onMouseOver, propsOnMouseOver)
  };
  var actualRef = useForkedRef(forwardRef, ref);
  return React.createElement(GenericButtonBase, _extends({
    "aria-describedby": ariaDescribedBy,
    "aria-expanded": ariaExpanded,
    "aria-pressed": toggle ? true : undefined,
    ref: actualRef,
    p: "none",
    size: size,
    width: buttonSizeMap[size],
    className: "".concat(className, " ").concat(tooltipClassName).trim()
  }, eventHandlers, rest), React.createElement(VisuallyHidden, null, label), React.createElement(Icon, {
    icon: icon,
    size: iconButtonIconSizeMap[size]
  }), tooltip);
});
IconButtonComponent.displayName = 'IconButtonComponent';

var outlineCSS = function outlineCSS(props) {
  var shape = props.shape;
  return css(["border:1px solid ", ";", " &:hover,&:focus,&.hover{border-color:", ";}&[aria-expanded='true'],&:active,&.active{border-color:", ";}&[disabled]{&:hover,&:active,&:focus{border-color:", ";}}"], function (_ref3) {
    var colors = _ref3.theme.colors;
    return colors.ui3;
  }, shape === 'round' && 'border-radius: 100%;', function (_ref4) {
    var colors = _ref4.theme.colors;
    return colors.neutral;
  }, function (_ref5) {
    var colors = _ref5.theme.colors;
    return colors.neutralInteractive;
  }, function (_ref6) {
    var colors = _ref6.theme.colors;
    return colors.ui3;
  });
};

export var IconButton = styled(IconButtonComponent).attrs(function (_ref7) {
  var _ref7$type = _ref7.type,
      type = _ref7$type === void 0 ? 'button' : _ref7$type;
  return {
    type: type
  };
}).withConfig({
  displayName: "IconButton",
  componentId: "n9jti8-1"
})(["", " ", " background:none;border:none;", " padding:0;", ""], reset, space, iconButtonColor, function (props) {
  return props.outline && outlineCSS;
});
//# sourceMappingURL=IconButton.js.map