import styled from 'styled-components';
import { ButtonBase } from './ButtonBase';
export var ButtonTransparent = styled(ButtonBase).withConfig({
  displayName: "ButtonTransparent",
  componentId: "sc-799h13-0"
})(["background:transparent;border:1px solid transparent;color:", ";padding:0 ", ";&:hover,&:focus,&.hover{background:", ";border-color:", ";}&[aria-expanded='true'],&:active,&.active{background:", ";border-color:", ";}&[disabled]{&:hover,&:active,&:focus{background-color:transparent;border-color:transparent;color:", ";}}"], function (_ref) {
  var theme = _ref.theme,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'key' : _ref$color;
  return theme.colors[color];
}, function (props) {
  return props.theme.space.xsmall;
}, function (_ref2) {
  var theme = _ref2.theme,
      _ref2$color = _ref2.color,
      color = _ref2$color === void 0 ? 'key' : _ref2$color;
  return theme.colors["".concat(color, "Subtle")];
}, function (_ref3) {
  var theme = _ref3.theme,
      _ref3$color = _ref3.color,
      color = _ref3$color === void 0 ? 'key' : _ref3$color;
  return theme.colors["".concat(color, "Subtle")];
}, function (_ref4) {
  var theme = _ref4.theme,
      _ref4$color = _ref4.color,
      color = _ref4$color === void 0 ? 'key' : _ref4$color;
  return theme.colors["".concat(color, "Accent")];
}, function (_ref5) {
  var theme = _ref5.theme,
      _ref5$color = _ref5.color,
      color = _ref5$color === void 0 ? 'key' : _ref5$color;
  return theme.colors["".concat(color, "Accent")];
}, function (_ref6) {
  var theme = _ref6.theme,
      _ref6$color = _ref6.color,
      color = _ref6$color === void 0 ? 'key' : _ref6$color;
  return theme.colors[color];
});
//# sourceMappingURL=ButtonTransparent.js.map