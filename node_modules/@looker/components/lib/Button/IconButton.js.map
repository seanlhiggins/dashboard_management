{"version":3,"sources":["../../src/Button/IconButton.tsx"],"names":["some","isFunction","styled","css","reset","space","shouldForwardProp","React","forwardRef","Icon","useTooltip","useForkedRef","useWrapEvent","VisuallyHidden","GenericButtonBase","buttonCSS","iconButtonColor","iconButtonIconSizeMap","buttonSizeMap","IconButtonStyle","button","withConfig","attrs","type","focusVisible","IconButtonComponent","props","ariaExpanded","className","icon","id","size","label","toggle","tooltipDisabled","tooltipPlacement","tooltipTextAlign","tooltipWidth","propsOnFocus","onFocus","propsOnBlur","onBlur","propsOnMouseOver","onMouseOver","propsOnMouseOut","onMouseOut","rest","hasOuterTooltip","content","disabled","undefined","placement","textAlign","width","domProps","ariaDescribedBy","tooltipClassName","ref","tooltip","eventHandlers","actualRef","trim","displayName","outlineCSS","shape","colors","theme","ui3","neutral","neutralInteractive","IconButton","outline"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport some from 'lodash/some'\nimport isFunction from 'lodash/isFunction'\nimport styled, { css } from 'styled-components'\nimport {\n  CompatibleHTMLProps,\n  reset,\n  SpaceProps,\n  space,\n  shouldForwardProp,\n  SizeLarge,\n  SizeMedium,\n  SizeSmall,\n  SizeXSmall,\n  SizeXXSmall,\n} from '@looker/design-tokens'\nimport { Property } from 'csstype'\nimport React, { forwardRef, Ref } from 'react'\nimport { Placement } from '@popperjs/core'\nimport { Icon, IconProps } from '../Icon'\nimport { useTooltip } from '../Tooltip'\nimport { useForkedRef, useWrapEvent } from '../utils'\nimport { VisuallyHidden } from '../VisuallyHidden'\nimport { GenericButtonBase, buttonCSS } from './ButtonBase'\nimport { ButtonBaseProps } from './types'\nimport { iconButtonColor } from './iconButtonColor'\nimport { iconButtonIconSizeMap, buttonSizeMap } from './size'\n\ninterface IconButtonVariantProps {\n  /**\n   * Defines the variant or mapping of colors to style properties, like border of the button.\n   * @default false\n   */\n  outline?: boolean\n}\n\nexport type IconButtonSizes =\n  | SizeXXSmall\n  | SizeXSmall\n  | SizeSmall\n  | SizeMedium\n  | SizeLarge\n\nexport interface IconButtonProps\n  extends Omit<CompatibleHTMLProps<HTMLButtonElement>, 'children' | 'type'>,\n    Omit<ButtonBaseProps, 'color'>,\n    IconButtonVariantProps,\n    Pick<IconProps, 'icon'>,\n    SpaceProps {\n  type?: 'button' | 'submit' | 'reset'\n  /*\n   * this props refer to the keyboard expected focus behavior\n   */\n  focusVisible?: boolean\n  outline?: boolean\n  /**\n   *  A hidden text label for the IconButton that is accessible to assistive technology\n   */\n  label: string\n  /**\n   *  Sets the size of the button\n   * @default 'xsmall'\n   */\n  size?: IconButtonSizes\n  /**\n   *  Optional round icon button variant\n   * @default 'square'\n   */\n  shape?: 'round' | 'square'\n  /**\n   * If the IconButton is in the optional toggled on or toggled off state\n   */\n  toggle?: boolean\n  /**\n   * By default IconButton shows a Tooltip with the Button's label text. Setting disableTooltip will disable that behavior.\n   * @default false\n   */\n  tooltipDisabled?: boolean\n  /**\n   * Placement of the built-in Tooltip.\n   */\n  tooltipPlacement?: Placement\n  /**\n   * Width of the built-in Tooltip.\n   */\n  tooltipWidth?: string\n  /**\n   * Text alignment of the built-in Tooltip.\n   */\n  tooltipTextAlign?: Property.TextAlign\n}\n\nexport const IconButtonStyle = styled.button\n  .withConfig({\n    shouldForwardProp,\n  })\n  .attrs(({ type = 'button' }) => ({\n    type,\n  }))<IconButtonProps>`\n  ${({ focusVisible }) => buttonCSS('neutral', focusVisible)}\n  height: auto;\n`\n\nconst IconButtonComponent = forwardRef(\n  (props: IconButtonProps, forwardRef: Ref<HTMLButtonElement>) => {\n    const {\n      'aria-expanded': ariaExpanded,\n      className,\n      icon,\n      id,\n      size = 'xsmall',\n      label,\n      toggle,\n      tooltipDisabled,\n      tooltipPlacement,\n      tooltipTextAlign,\n      tooltipWidth,\n      onFocus: propsOnFocus,\n      onBlur: propsOnBlur,\n      onMouseOver: propsOnMouseOver,\n      onMouseOut: propsOnMouseOut,\n      ...rest\n    } = props\n\n    // any of the hover/focus handlers being present disables built-in tooltip\n    const hasOuterTooltip = some(\n      [propsOnFocus, propsOnBlur, propsOnMouseOver, propsOnMouseOut],\n      isFunction\n    )\n\n    const {\n      domProps: {\n        'aria-describedby': ariaDescribedBy,\n        className: tooltipClassName,\n        ref,\n        onFocus,\n        onBlur,\n        onMouseOver,\n        onMouseOut,\n      },\n      tooltip,\n    } = useTooltip({\n      content: label,\n      // ariaExpanded = true indicates an open Popover or Menu â€“ don't show the tooltip\n      disabled: tooltipDisabled || hasOuterTooltip || ariaExpanded === true,\n      id: id ? `${id}-tooltip` : undefined,\n      placement: tooltipPlacement,\n      textAlign: tooltipTextAlign,\n      width: tooltipWidth,\n    })\n\n    const eventHandlers = {\n      onBlur: useWrapEvent(onBlur, propsOnBlur),\n      onFocus: useWrapEvent(onFocus, propsOnFocus),\n      onMouseOut: useWrapEvent(onMouseOut, propsOnMouseOut),\n      onMouseOver: useWrapEvent(onMouseOver, propsOnMouseOver),\n    }\n\n    const actualRef = useForkedRef<HTMLButtonElement>(forwardRef, ref)\n\n    return (\n      <GenericButtonBase\n        aria-describedby={ariaDescribedBy}\n        aria-expanded={ariaExpanded}\n        aria-pressed={toggle ? true : undefined}\n        ref={actualRef}\n        p=\"none\"\n        size={size}\n        width={buttonSizeMap[size]}\n        className={`${className} ${tooltipClassName}`.trim()}\n        {...eventHandlers}\n        {...rest}\n      >\n        <VisuallyHidden>{label}</VisuallyHidden>\n        <Icon icon={icon} size={iconButtonIconSizeMap[size]} />\n        {tooltip}\n      </GenericButtonBase>\n    )\n  }\n)\n\nIconButtonComponent.displayName = 'IconButtonComponent'\n\nconst outlineCSS = (props: IconButtonProps) => {\n  const { shape } = props\n\n  return css`\n    border: 1px solid ${({ theme: { colors } }) => colors.ui3};\n    ${shape === 'round' && 'border-radius: 100%;'}\n\n    &:hover,\n    &:focus,\n    &.hover {\n      border-color: ${({ theme: { colors } }) => colors.neutral};\n    }\n\n    &[aria-expanded='true'],\n    &:active,\n    &.active {\n      border-color: ${({ theme: { colors } }) => colors.neutralInteractive};\n    }\n\n    &[disabled] {\n      &:hover,\n      &:active,\n      &:focus {\n        border-color: ${({ theme: { colors } }) => colors.ui3};\n      }\n    }\n  `\n}\n\nexport const IconButton = styled(IconButtonComponent).attrs(\n  ({ type = 'button' }) => ({\n    type,\n  })\n)<IconButtonProps>`\n  ${reset}\n  ${space}\n\n  background: none;\n  border: none;\n  ${iconButtonColor}\n  padding: 0;\n\n  ${(props) => props.outline && outlineCSS}\n`\n"],"file":"IconButton.js"}