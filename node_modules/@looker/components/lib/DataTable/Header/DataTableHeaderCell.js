import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext, forwardRef } from 'react';
import styled from 'styled-components';
import { ExpandLess } from '@styled-icons/material-rounded/ExpandLess';
import { ExpandMore } from '@styled-icons/material-rounded/ExpandMore';
import { DataTableContext } from '../DataTableContext';
import { Icon } from '../../Icon';
import { Space } from '../../Layout/Space';
import { Tooltip } from '../../Tooltip';
import { Truncate } from '../../Truncate';
import { useClickable } from '../../utils';
import { columnSize, sizeInfersTruncate } from '../Column/columnSize';
import { FocusableCell } from '../Column/FocusableCell';
var DataTableHeaderCellLayout = forwardRef(function (_ref, ref) {
  var canSort = _ref.canSort,
      className = _ref.className,
      title = _ref.title,
      titleIcon = _ref.titleIcon,
      id = _ref.id,
      size = _ref.size,
      sortDirection = _ref.sortDirection,
      type = _ref.type;

  var _useContext = useContext(DataTableContext),
      onSort = _useContext.onSort;

  var onClick = function onClick() {
    if (onSort && canSort) {
      onSort(id, sortDirection === 'asc' ? 'desc' : 'asc');
    }
  };

  var _useClickable = useClickable({
    onClick: onClick
  }),
      role = _useClickable.role,
      clickableProps = _objectWithoutProperties(_useClickable, ["role"]);

  var label = titleIcon ? React.createElement(Tooltip, {
    content: title
  }, React.createElement(Icon, {
    color: "ui3",
    title: title,
    icon: titleIcon,
    size: "small"
  })) : size && sizeInfersTruncate(size) ? React.createElement(Truncate, {
    width: "auto"
  }, title) : title;
  return React.createElement(FocusableCell, _extends({
    as: "th",
    "aria-sort": sortDirection === 'asc' ? 'ascending' : sortDirection === 'desc' ? 'descending' : 'none',
    className: className,
    ref: ref,
    style: {
      cursor: canSort ? 'pointer' : undefined
    }
  }, clickableProps), React.createElement(Space, {
    gap: "xxsmall",
    reverse: type === 'number'
  }, label, sortDirection && React.createElement(Icon, {
    icon: sortDirection === 'asc' ? React.createElement(ExpandLess, null) : React.createElement(ExpandMore, null),
    size: "small"
  })));
});
DataTableHeaderCellLayout.displayName = 'DataTableHeaderCellLayout';
export var DataTableHeaderCell = styled(DataTableHeaderCellLayout).withConfig({
  displayName: "DataTableHeaderCell",
  componentId: "sc-1e4utgn-0"
})(["", " border-bottom:solid 1px ", ";color:", ";font-weight:", ";text-align:left;"], columnSize, function (props) {
  return props.theme.colors.ui2;
}, function (props) {
  return props.theme.colors.text5;
}, function (props) {
  return props.theme.fontWeights.semiBold;
});
//# sourceMappingURL=DataTableHeaderCell.js.map