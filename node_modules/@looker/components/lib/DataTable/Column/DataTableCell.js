function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";
import React, { forwardRef, useEffect, useRef, useState } from 'react';
import styled from 'styled-components';
import { Space, SpaceVertical } from '../../Layout';
import { Paragraph } from '../../Text';
import { Truncate } from '../../Truncate';
import { useForkedRef } from '../../utils';
import { columnSize } from './columnSize';
import { FocusableCell } from './FocusableCell';
var DataTableCellLayout = forwardRef(function (props, forwardedRef) {
  var children = props.children,
      description = props.description,
      indicator = props.indicator,
      onBlur = props.onBlur,
      onClick = props.onClick,
      onKeyUp = props.onKeyUp,
      size = props.size;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocusVisible = _useState2[0],
      setFocusVisible = _useState2[1];

  var handleOnKeyUp = function handleOnKeyUp(event) {
    setFocusVisible(true);
    onKeyUp && onKeyUp(event);
  };

  var handleOnBlur = function handleOnBlur(event) {
    setFocusVisible(false);
    onBlur && onBlur(event);
  };

  var handleOnClick = function handleOnClick(event) {
    setFocusVisible(false);
    onClick && onClick(event);
  };

  var content = size && size !== 'nowrap' ? React.createElement(Truncate, null, children) : children;
  var ref = useRef(null);
  var forkedRef = useForkedRef(ref, forwardedRef);
  useEffect(function () {
    var _ref$current;

    var element = ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.querySelectorAll('a, button, input');

    if (element) {
      element.forEach(function (activeElement) {
        return activeElement.setAttribute('tabIndex', '-1');
      });
    }
  });

  if (description) {
    content = React.createElement(SpaceVertical, {
      gap: "xxxsmall",
      align: "stretch"
    }, React.createElement("span", null, content), description && React.createElement(Paragraph, {
      fontSize: "xsmall",
      color: "subdued",
      truncate: true
    }, React.createElement(Truncate, null, description)));

    if (indicator) {
      content = React.createElement(Space, {
        gap: "medium"
      }, indicator, content);
    }
  } else if (indicator) {
    content = React.createElement(Space, {
      gap: "medium"
    }, indicator, React.createElement("span", null, content));
  }

  return React.createElement(FocusableCell, _extends({
    focusVisible: isFocusVisible,
    onBlur: handleOnBlur,
    onClick: handleOnClick,
    onKeyUp: handleOnKeyUp,
    ref: forkedRef
  }, props), content);
});
DataTableCellLayout.displayName = 'DataTableCellLayout';
export var DataTableCell = styled(DataTableCellLayout).withConfig({
  displayName: "DataTableCell",
  componentId: "sc-1sdic09-0"
})(["", ""], columnSize);
//# sourceMappingURL=DataTableCell.js.map