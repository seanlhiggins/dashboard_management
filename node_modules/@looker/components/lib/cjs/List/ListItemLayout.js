"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListItemLayout = exports.listItemIconCSS = void 0;

require("core-js/modules/es.symbol.description.js");

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _styledIcon = require("@styled-icons/styled-icon");

var _Icon = require("../Icon");

var _Layout = require("../Layout");

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ListItemLayoutInternal = ({
  children,
  className = '',
  labelCreator,
  description,
  detail,
  icon
}) => {
  const content = _react.default.createElement(_react.default.Fragment, null, icon, _react.default.createElement(_Layout.Flex, {
    flexDirection: "column",
    minWidth: 0,
    flexGrow: 1
  }, children, description), detail);

  return labelCreator({
    children: content,
    className
  });
};

const listItemIconCSS = (0, _styledComponents.css)(["& > svg,& > ", ",& > ", "{", " align-self:center;flex-grow:0;flex-shrink:0;height:", ";margin-right:", ";width:", ";}"], _styledIcon.StyledIconBase, _Icon.IconPlaceholder, _designTokens.color, ({
  iconSize,
  theme
}) => theme.sizes[iconSize], ({
  iconGap,
  theme
}) => theme.space[iconGap], ({
  iconSize,
  theme
}) => theme.sizes[iconSize]);
exports.listItemIconCSS = listItemIconCSS;
const ListItemLayout = (0, _styledComponents.default)(ListItemLayoutInternal).attrs(({
  color = 'text2',
  disabled
}) => ({
  color: disabled ? 'text1' : color
})).withConfig({
  displayName: "ListItemLayout",
  componentId: "sc-1kn6g5n-0"
})(["", " ", ""], props => (0, _utils.listItemPadding)(_objectSpread({}, props)), listItemIconCSS);
exports.ListItemLayout = ListItemLayout;
//# sourceMappingURL=ListItemLayout.js.map