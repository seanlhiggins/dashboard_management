"use strict";

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListItem = void 0;

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.index-of.js");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _react = _interopRequireWildcard(require("react"));

var _ListItemDetail = require("../List/ListItemDetail");

var _Text = require("../Text");

var _Icon = require("../Icon");

var _Truncate = require("../Truncate");

var _utils = require("../utils");

var _ListItemContext = require("./ListItemContext");

var _ListItemLabel = require("./ListItemLabel");

var _ListItemLayout = require("./ListItemLayout");

var _ListItemLayoutAccessory = require("./ListItemLayoutAccessory");

var _ListItemWrapper = require("./ListItemWrapper");

var _utils2 = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const TruncateWrapper = ({
  children,
  color,
  fontSize,
  lineHeight
}) => _react.default.createElement(_Text.Text, {
  color: color,
  fontSize: fontSize,
  lineHeight: lineHeight
}, _react.default.createElement(_Truncate.Truncate, null, children));

const ListItemInternal = (0, _react.forwardRef)((props, ref) => {
  const children = props.children,
        className = props.className,
        color = props.color,
        current = props.current,
        propsDensity = props.density,
        description = props.description,
        detail = props.detail,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        href = props.href,
        icon = props.icon,
        itemRole = props.itemRole,
        propsKeyColor = props.keyColor,
        onBlur = props.onBlur,
        onClick = props.onClick,
        onKeyDown = props.onKeyDown,
        onKeyUp = props.onKeyUp,
        onMouseEnter = props.onMouseEnter,
        onMouseLeave = props.onMouseLeave,
        rel = props.rel,
        role = props.role,
        selected = props.selected,
        target = props.target,
        truncate = props.truncate,
        restProps = _objectWithoutProperties(props, ["children", "className", "color", "current", "density", "description", "detail", "disabled", "href", "icon", "itemRole", "keyColor", "onBlur", "onClick", "onKeyDown", "onKeyUp", "onMouseEnter", "onMouseLeave", "rel", "role", "selected", "target", "truncate"]);

  const _useContext = (0, _react.useContext)(_ListItemContext.ListItemContext),
        contextDensity = _useContext.density,
        iconGutter = _useContext.iconGutter,
        contextKeyColor = _useContext.keyColor;

  const itemDimensions = (0, _utils2.listItemDimensions)(propsDensity || contextDensity);
  const keyColor = (0, _utils.undefinedCoalesce)([propsKeyColor, contextKeyColor]);

  const _useState = (0, _react.useState)(false),
        _useState2 = _slicedToArray(_useState, 2),
        focusVisible = _useState2[0],
        setFocusVisible = _useState2[1];

  const _useState3 = (0, _react.useState)(false),
        _useState4 = _slicedToArray(_useState3, 2),
        hovered = _useState4[0],
        setHovered = _useState4[1];

  const labelColor = disabled ? 'text1' : color;
  const descriptionColor = disabled ? 'text1' : 'text2';

  const handleOnBlur = event => {
    setFocusVisible(false);
    onBlur && onBlur(event);
  };

  const handleOnClick = event => {
    setFocusVisible(false);
    onClick && onClick(event);
  };

  const handleOnKeyDown = event => {
    onKeyDown && onKeyDown(event);
    setFocusVisible(true);
  };

  const handleOnKeyUp = event => {
    onKeyUp && onKeyUp(event);
    setFocusVisible(true);
  };

  const handleOnMouseEnter = (0, _utils.useWrapEvent)(() => setHovered(true), onMouseEnter);
  const handleOnMouseLeave = (0, _utils.useWrapEvent)(() => setHovered(false), onMouseLeave);

  if (disabled && itemRole === 'link') {
    console.warn('itemRole="link" and disabled cannot be combined - use itemRole="button" if you need to offer a disabled ListItem');
  }

  const Wrapper = truncate ? TruncateWrapper : _Text.Text;

  const renderedChildren = _react.default.createElement(Wrapper, {
    color: labelColor,
    fontSize: itemDimensions.labelFontSize,
    lineHeight: itemDimensions.labelLineHeight
  }, children);

  const renderedDescription = _react.default.createElement(Wrapper, {
    color: descriptionColor,
    fontSize: itemDimensions.descriptionFontSize,
    lineHeight: itemDimensions.descriptionLineHeight
  }, description);

  const _getDetailOptions = (0, _utils2.getDetailOptions)(detail),
        accessory = _getDetailOptions.accessory,
        content = _getDetailOptions.content,
        hoverDisclosure = _getDetailOptions.hoverDisclosure;

  const renderedDetail = detail && _react.default.createElement(_utils.HoverDisclosure, {
    visible: !hoverDisclosure
  }, _react.default.createElement(_ListItemDetail.ListItemDetail, {
    pr: accessory ? itemDimensions.px : '0'
  }, content));

  const statefulProps = {
    current,
    disabled,
    hovered,
    keyColor,
    selected
  };

  const LabelCreator = ({
    children,
    className
  }) => _react.default.createElement(_ListItemLabel.ListItemLabel, _extends({
    itemRole: itemRole,
    "aria-current": current,
    "aria-selected": selected,
    className: className,
    height: itemDimensions.height,
    href: href,
    onBlur: handleOnBlur,
    onClick: disabled ? undefined : handleOnClick,
    onKeyDown: handleOnKeyDown,
    onKeyUp: handleOnKeyUp,
    rel: (0, _utils2.createSafeRel)(rel, target),
    role: role || 'listitem',
    target: target,
    tabIndex: -1
  }, statefulProps), children);

  const Layout = accessory ? _ListItemLayoutAccessory.ListItemLayoutAccessory : _ListItemLayout.ListItemLayout;

  const listItemContent = _react.default.createElement(Layout, {
    color: color,
    description: renderedDescription,
    detail: renderedDetail,
    disabled: disabled,
    icon: icon || iconGutter && _react.default.createElement(_Icon.IconPlaceholder, null),
    iconGap: itemDimensions.iconGap,
    iconSize: itemDimensions.iconSize,
    labelCreator: LabelCreator,
    px: itemDimensions.px,
    py: itemRole === 'none' ? 'none' : itemDimensions.py
  }, renderedChildren);

  return _react.default.createElement(_utils.HoverDisclosureContext.Provider, {
    value: {
      visible: hovered
    }
  }, _react.default.createElement(_ListItemWrapper.ListItemWrapper, _extends({
    className: className,
    description: description,
    disabled: disabled,
    focusVisible: focusVisible,
    onMouseEnter: handleOnMouseEnter,
    onMouseLeave: handleOnMouseLeave,
    ref: ref
  }, itemDimensions, restProps), listItemContent));
});
ListItemInternal.displayName = 'ListItemInternal';
const ListItem = (0, _styledComponents.default)(ListItemInternal).withConfig({
  displayName: "ListItem",
  componentId: "dmbyyb-0"
})([""]);
exports.ListItem = ListItem;
//# sourceMappingURL=ListItem.js.map