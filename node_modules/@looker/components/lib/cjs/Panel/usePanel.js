"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePanel = void 0;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../utils");

var _PanelHeader = require("./PanelHeader");

var _PanelSurface = require("./PanelSurface");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const usePanel = ({
  canClose,
  content,
  defaultOpen = false,
  direction = 'left',
  isOpen: controlledIsOpen,
  onClose,
  setOpen: controlledSetOpen,
  title
}) => {
  const _useState = (0, _react.useState)(defaultOpen),
        _useState2 = _slicedToArray(_useState, 2),
        uncontrolledIsOpen = _useState2[0],
        setUncontrolledIsOpen = _useState2[1];

  const isControlled = (0, _utils.useControlWarn)({
    controllingProps: ['setOpen'],
    isControlledCheck: () => controlledSetOpen !== undefined,
    name: 'usePanel'
  });

  if (Boolean(onClose) && Boolean(controlledSetOpen)) {
    throw new Error('usePanel does not support setting both `setOpen` and `onClose`. Use just `setOpen`');
  }

  const isOpen = isControlled ? controlledIsOpen || false : uncontrolledIsOpen;

  const _useAnimationState = (0, _utils.useAnimationState)(isOpen, defaultOpen ? 'none' : undefined),
        busy = _useAnimationState.busy,
        className = _useAnimationState.className,
        renderDOM = _useAnimationState.renderDOM;

  const setOpen = isControlled && controlledSetOpen ? controlledSetOpen : setUncontrolledIsOpen;

  const handleOpen = () => setOpen(true);

  const handleClose = () => {
    if (canClose && !canClose()) return;
    setOpen(false);
    onClose && onClose();
  };

  const panel = renderDOM && _react.default.createElement(_PanelSurface.PanelSurface, {
    "aria-busy": busy ? true : undefined,
    className: className,
    direction: direction
  }, _react.default.createElement(_PanelHeader.PanelHeader, {
    direction: direction,
    handleClose: handleClose,
    title: title
  }), _react.default.createElement("div", null, content));

  return {
    domProps: {
      'aria-expanded': isOpen,
      onClick: handleOpen,
      role: 'button'
    },
    isOpen,
    panel,
    setOpen
  };
};

exports.usePanel = usePanel;
//# sourceMappingURL=usePanel.js.map