"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Fieldset = exports.FieldsetContext = void 0;

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.index-of.js");

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _pick = _interopRequireDefault(require("lodash/pick"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _ArrowDropDown = require("@styled-icons/material/ArrowDropDown");

var _ArrowRight = require("@styled-icons/material/ArrowRight");

var _Layout = require("../../Layout");

var _simple = require("../../Layout/utils/simple");

var _Legend = require("../Legend");

var _Accordion = require("../../Accordion");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const accordionIndicatorDefaults = {
  indicatorGap: 'xsmall',
  indicatorIcons: {
    close: _react.default.createElement(_ArrowRight.ArrowRight, null),
    open: _react.default.createElement(_ArrowDropDown.ArrowDropDown, null)
  },
  indicatorPosition: 'left',
  indicatorSize: 'medium'
};
const FieldsetContext = (0, _react.createContext)({});
exports.FieldsetContext = FieldsetContext;
const FieldsetLayout = (0, _react.forwardRef)((props, ref) => {
  const _omit = (0, _omit2.default)(props, [..._Accordion.AccordionControlPropKeys]),
        accordion = _omit.accordion,
        className = _omit.className,
        inline = _omit.inline,
        _omit$gap = _omit.gap,
        gap = _omit$gap === void 0 ? 'medium' : _omit$gap,
        legend = _omit.legend,
        fieldsHideLabel = _omit.fieldsHideLabel,
        children = _omit.children,
        wrap = _omit.wrap,
        restProps = _objectWithoutProperties(_omit, ["accordion", "className", "inline", "gap", "legend", "fieldsHideLabel", "children", "wrap"]);

  const accordionProps = _objectSpread(_objectSpread({}, (0, _pick.default)(props, [..._Accordion.AccordionControlPropKeys])), accordionIndicatorDefaults);

  const LayoutComponent = inline ? _Layout.Space : _Layout.SpaceVertical;

  const content = _react.default.createElement(LayoutComponent, {
    gap: gap,
    ref: ref,
    role: "group",
    align: "start",
    flexWrap: wrap ? 'wrap' : undefined
  }, children);

  !legend && accordion && console.warn('Please provide a value for the "legend" prop if using accordion mode');
  const renderedFieldset = legend ? accordion ? _react.default.createElement(_Accordion.Accordion, accordionProps, _react.default.createElement(_Accordion.AccordionDisclosure, null, legend), _react.default.createElement(_Accordion.AccordionContent, null, content)) : _react.default.createElement(_Layout.SpaceVertical, null, typeof legend === 'string' ? _react.default.createElement(_Legend.Legend, null, legend) : legend, content) : content;
  return _react.default.createElement(FieldsetContext.Provider, {
    value: {
      fieldsHideLabel: fieldsHideLabel || false
    }
  }, _react.default.createElement("div", _extends({}, (0, _designTokens.omitStyledProps)(restProps), {
    className: className
  }), renderedFieldset));
});
FieldsetLayout.displayName = 'FieldsetLayout';
const Fieldset = (0, _styledComponents.default)(FieldsetLayout).attrs(({
  width = '100%'
}) => ({
  width
})).withConfig({
  displayName: "Fieldset",
  componentId: "fc4a60-0"
})(["", " ", "{padding-left:", ";padding-top:", ";}", "{font-size:", ";font-weight:", ";height:24px;padding:", " 0;}"], _simple.simpleLayoutCSS, _Accordion.AccordionContent, ({
  theme
}) => {
  const borderWidth = '1px';
  const defaultIndicatorSize = theme.space.medium;
  const defaultIndicatorGap = theme.space.xsmall;
  return `calc(${borderWidth} + ${defaultIndicatorSize} + ${defaultIndicatorGap})`;
}, ({
  theme
}) => theme.space.medium, _Accordion.AccordionDisclosure, ({
  theme
}) => theme.fontSizes.small, ({
  theme
}) => theme.fontWeights.semiBold, ({
  theme: {
    space
  }
}) => space.xxsmall);
exports.Fieldset = Fieldset;
//# sourceMappingURL=Fieldset.js.map