"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputTimeSelect = void 0;

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.string.split.js");

require("core-js/modules/es.array.includes.js");

require("core-js/modules/es.string.includes.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.array.map.js");

var _reactI18next = require("react-i18next");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _reduce = _interopRequireDefault(require("lodash/reduce"));

var _map3 = _interopRequireDefault(require("lodash/map"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _find = _interopRequireDefault(require("lodash/find"));

var _trim = _interopRequireDefault(require("lodash/trim"));

var _last = _interopRequireDefault(require("lodash/last"));

var _head = _interopRequireDefault(require("lodash/head"));

var _sortedIndex = _interopRequireDefault(require("lodash/sortedIndex"));

var _throttle = _interopRequireDefault(require("lodash/throttle"));

var _Combobox = require("../Combobox");

var _utils = require("../../../utils");

var _ariaProps = require("../Select/utils/ariaProps");

var _utils2 = require("../InputTime/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const cycleHourDisplay = (format, hour) => {
  if (format === '12h') {
    if (hour === 0) {
      return 12;
    } else if (hour > 12) {
      return hour - 12;
    }
  }

  return hour;
};

const formatLabel = (format, hour, minute) => {
  const formattedHour = (0, _utils2.formatTimeString)(cycleHourDisplay(format, hour));
  const formattedMinute = (0, _utils2.formatTimeString)(minute);
  const period = format === '12h' && (hour < 12 ? 'am' : 'pm');
  return (0, _trim.default)(`${formattedHour}:${formattedMinute} ${period || ''}`);
};

const generateMinuteIntervals = interval => {
  const minutes = new Array(60 / interval);
  return (0, _map3.default)(minutes, (_, index) => (0, _utils2.formatTimeString)(index * interval));
};

const generateTimes = (format, interval) => {
  const hours = new Array(24);
  const minutes = generateMinuteIntervals(interval);
  return (0, _reduce.default)(hours, (result, _, hour) => {
    const formatLabel = format === '12h' && (hour < 12 ? 'am' : 'pm');
    const formattedHour = (0, _utils2.formatTimeString)(cycleHourDisplay(format, hour));
    const hourWithMinutes = (0, _map3.default)(minutes, minute => {
      const label = (0, _trim.default)(`${formattedHour}:${minute} ${formatLabel || ''}`);
      const value = `${(0, _utils2.formatTimeString)(hour)}:${minute}`;
      return {
        label,
        value
      };
    });
    return [...result, ...hourWithMinutes];
  }, []);
};

const matchClosestMinute = (interval, timeCode) => {
  const minuteOptions = (0, _map3.default)(generateMinuteIntervals(interval), _utils2.parseBase10Int);
  const now = new Date(Date.now());
  const currentMinute = timeCode ? (0, _utils2.parseBase10Int)(timeCode.split(':')[1]) : now.getMinutes();
  const currentHour = timeCode ? (0, _utils2.parseBase10Int)(timeCode.split(':')[0]) : now.getHours();
  const index = (0, _sortedIndex.default)(minuteOptions, currentMinute);
  const optionBefore = minuteOptions[index - 1] || (0, _head.default)(minuteOptions);
  const optionAfter = minuteOptions[index] || (0, _last.default)(minuteOptions);
  const roundedMinute = currentMinute - optionBefore < optionAfter - currentMinute ? optionBefore : optionAfter;
  const formattedHour = (0, _utils2.formatTimeString)(currentHour);
  const formattedMinute = (0, _utils2.formatTimeString)(roundedMinute);
  return `${formattedHour}:${formattedMinute}`;
};

const createOptionFromStringValue = (format, value) => {
  const _map = (0, _map3.default)(value.split(':'), _utils2.parseBase10Int),
        _map2 = _slicedToArray(_map, 2),
        hour = _map2[0],
        minute = _map2[1];

  return {
    label: formatLabel(format, hour, minute),
    value
  };
};

const convert12to24hr = (hour, period) => {
  if (hour + period === '12am') {
    return 0;
  } else if (period === 'pm' && hour < 12) {
    return hour + 12;
  } else {
    return hour;
  }
};

const createOptionFromLabel = (format, label) => {
  const period = label.toLowerCase().includes('p') ? 'pm' : 'am';
  const numericTime = label.replace(/[apm]/gi, '');

  const _numericTime$split$ma = numericTime.split(':').map(_utils2.parseBase10Int),
        _numericTime$split$ma2 = _slicedToArray(_numericTime$split$ma, 2),
        _numericTime$split$ma3 = _numericTime$split$ma2[0],
        hour = _numericTime$split$ma3 === void 0 ? 0 : _numericTime$split$ma3,
        _numericTime$split$ma4 = _numericTime$split$ma2[1],
        minute = _numericTime$split$ma4 === void 0 ? 0 : _numericTime$split$ma4;

  const hr24 = convert12to24hr(hour, period);
  const value = `${(0, _utils2.formatTimeString)(hr24)}:${(0, _utils2.formatTimeString)(minute)}`;

  if ((0, _utils2.isValidTime)(value)) {
    return {
      label: formatLabel(format, hr24, minute),
      value
    };
  }

  return undefined;
};

const matchStringValueToOption = (options, format, value) => {
  if (value && (0, _utils2.isValidTime)(value)) {
    const option = (0, _find.default)(options, {
      value: value
    });
    return option || createOptionFromStringValue(format, value);
  }

  return undefined;
};

const matchStringLabelToOption = (options, label) => {
  if (label) {
    return (0, _find.default)(options, o => {
      return o.label ? o.label.includes(label) : false;
    });
  }

  return undefined;
};

const setScrollIntoView = (options, interval, selectedOption) => {
  if (selectedOption) {
    return (0, _map3.default)(options, option => matchClosestMinute(interval, selectedOption.value) === option.value ? _objectSpread(_objectSpread({}, option), {}, {
      scrollIntoView: true
    }) : option);
  }

  const now = matchClosestMinute(interval);
  return (0, _map3.default)(options, option => option.value === now ? _objectSpread(_objectSpread({}, option), {}, {
    scrollIntoView: true
  }) : option);
};

const arrowKeys = ['ArrowDown', 'ArrowUp', 'ArrowRight', 'ArrowLeft'];
const InputTimeSelectLayout = (0, _react.forwardRef)((_ref, ref) => {
  let className = _ref.className,
      _ref$interval = _ref.interval,
      interval = _ref$interval === void 0 ? 15 : _ref$interval,
      _ref$format = _ref.format,
      format = _ref$format === void 0 ? '12h' : _ref$format,
      onChange = _ref.onChange,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? '' : _ref$value,
      defaultValue = _ref.defaultValue,
      validationType = _ref.validationType,
      disabled = _ref.disabled,
      autoFocus = _ref.autoFocus,
      id = _ref.id,
      props = _objectWithoutProperties(_ref, ["className", "interval", "format", "onChange", "value", "defaultValue", "validationType", "disabled", "autoFocus", "id"]);

  const _useTranslation = (0, _reactI18next.useTranslation)('InputTimeSelect'),
        t = _useTranslation.t;

  (0, _utils.useReadOnlyWarn)('InputTimeSelect', value, onChange);
  const valueProp = value || defaultValue;

  if (!(0, _utils2.isValidTime)(valueProp)) {
    console.error(`Invalid time ("${valueProp}") passed to <InputTimeSelect />. Value should be formatted as a 24-hour string (e.g. value="02:00" or value="23:15").`);
  }

  const timeOptions = generateTimes(format, interval);

  const _useState = (0, _react.useState)(),
        _useState2 = _slicedToArray(_useState, 2),
        selectedOption = _useState2[0],
        setSelectedOption = _useState2[1];

  const _useState3 = (0, _react.useState)(''),
        _useState4 = _slicedToArray(_useState3, 2),
        inputTextValue = _useState4[0],
        setInputTextValue = _useState4[1];

  (0, _react.useEffect)(() => {
    setSelectedOption(matchStringValueToOption(timeOptions, format, value || defaultValue));
  }, [value]);

  const handleChange = newSelectedOption => {
    setSelectedOption(newSelectedOption);
    const newValue = newSelectedOption ? newSelectedOption.value : undefined;

    if ((0, _isFunction.default)(onChange) && (0, _utils2.isValidTime)(newValue)) {
      onChange(newValue);
    }
  };

  const throttledHandleChange = (0, _react.useCallback)((0, _throttle.default)(v => {
    handleChange(v);
  }, 50, {
    trailing: false
  }), [handleChange]);

  const handleTextInputChange = e => {
    setInputTextValue(e.target.value);
  };

  const handleTextInputBlur = () => {
    setInputTextValue('');
  };

  const _useState5 = (0, _react.useState)(false),
        _useState6 = _slicedToArray(_useState5, 2),
        isNavigating = _useState6[0],
        setIsNavigating = _useState6[1];

  const handleKeyDown = e => {
    const key = e.key;

    if (arrowKeys.includes(key)) {
      setIsNavigating(true);
    } else if (key === 'Enter' || key === 'Tab') {
      if (inputTextValue.length) {
        const option = createOptionFromLabel(format, inputTextValue);
        !isNavigating && throttledHandleChange(option);
      }
    } else {
      setIsNavigating(false);
    }
  };

  const optionToFocus = matchStringLabelToOption(timeOptions, inputTextValue) || selectedOption;
  const timeOptionsFocused = setScrollIntoView(timeOptions, interval, optionToFocus);
  const ariaProps = (0, _ariaProps.pickAriaAndValidationProps)(props);
  return _react.default.createElement(_Combobox.Combobox, {
    className: className,
    ref: ref,
    onChange: throttledHandleChange,
    value: selectedOption
  }, _react.default.createElement(_Combobox.ComboboxInput, _extends({
    placeholder: t('Select time'),
    onChange: handleTextInputChange,
    onBlur: handleTextInputBlur,
    onKeyDown: handleKeyDown,
    autoComplete: false,
    validationType: validationType,
    disabled: disabled,
    autoFocus: autoFocus,
    id: id
  }, ariaProps)), _react.default.createElement(_Combobox.ComboboxList, {
    persistSelection: true
  }, timeOptionsFocused.map((option, index) => _react.default.createElement(_Combobox.ComboboxOption, _extends({}, option, {
    key: index
  })))));
});
InputTimeSelectLayout.displayName = 'InputTimeSelectLayout';
const InputTimeSelect = (0, _styledComponents.default)(InputTimeSelectLayout).withConfig({
  displayName: "InputTimeSelect",
  componentId: "jpi7di-0"
})(["width:100%;"]);
exports.InputTimeSelect = InputTimeSelect;
//# sourceMappingURL=InputTimeSelect.js.map