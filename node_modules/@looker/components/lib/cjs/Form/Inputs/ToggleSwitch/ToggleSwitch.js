"use strict";

require("core-js/modules/es.weak-map.js");

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleSwitch = exports.ToggleSwitchLayout = void 0;

require("core-js/modules/es.array.index-of.js");

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _InputProps = require("../InputProps");

var _Knob = require("./Knob");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const DisabledKnob = _styledComponents.default.div.withConfig({
  displayName: "ToggleSwitch__DisabledKnob",
  componentId: "wcqgi4-0"
})(["", " background:", ";border-radius:1.25rem;bottom:0;left:0;opacity:0.4;position:absolute;right:0;top:0;"], _designTokens.reset, ({
  theme
}) => theme.colors.ui3);

const ToggleSwitchLayout = (0, _react.forwardRef)((_ref, ref) => {
  let className = _ref.className,
      disabled = _ref.disabled,
      on = _ref.on,
      validationType = _ref.validationType,
      props = _objectWithoutProperties(_ref, ["className", "disabled", "on", "validationType"]);

  return _react.default.createElement("div", {
    className: className
  }, _react.default.createElement("input", _extends({
    type: "checkbox",
    checked: on,
    disabled: disabled,
    role: "switch",
    "aria-checked": on,
    "aria-invalid": validationType === 'error' ? 'true' : undefined,
    ref: ref
  }, (0, _InputProps.pickInputProps)(props))), _react.default.createElement(_Knob.KnobContainer, {
    on: on,
    disabled: disabled
  }), disabled && _react.default.createElement(DisabledKnob, null));
});
exports.ToggleSwitchLayout = ToggleSwitchLayout;
ToggleSwitchLayout.displayName = 'ToggleSwitchLayout';
const ToggleSwitch = (0, _styledComponents.default)(ToggleSwitchLayout).withConfig({
  displayName: "ToggleSwitch",
  componentId: "wcqgi4-1"
})(["", " ", " height:1.25rem;position:relative;width:2.1875rem;input{cursor:", ";height:100%;left:0;margin:0;opacity:0;position:absolute;top:0;width:100%;z-index:1;&:focus + div{", "}}"], _designTokens.reset, _designTokens.space, ({
  disabled
}) => disabled ? undefined : 'pointer', _designTokens.toggleSwitchShadowColor);
exports.ToggleSwitch = ToggleSwitch;
//# sourceMappingURL=ToggleSwitch.js.map