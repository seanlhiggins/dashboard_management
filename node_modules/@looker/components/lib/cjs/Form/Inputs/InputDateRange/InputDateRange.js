"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputDateRange = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _partial = _interopRequireDefault(require("lodash/partial"));

var _min = _interopRequireDefault(require("lodash/min"));

var _max = _interopRequireDefault(require("lodash/max"));

var _isEmpty = _interopRequireDefault(require("lodash/isEmpty"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _values = _interopRequireDefault(require("lodash/values"));

var _reactI18next = require("react-i18next");

var _VisuallyHidden = require("../../../VisuallyHidden");

var _InputText = require("../InputText");

var _InlineInputText = require("../../Inputs/InlineInputText");

var _Calendar = require("../../../Calendar");

var _i18n = require("../../../utils/i18n");

var _useID = require("../../../utils/useID");

var _useReadOnlyWarn = require("../../../utils/useReadOnlyWarn");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const transformMonth = (date = new Date(Date.now()), monthDiff) => {
  const newDate = new Date(date);
  newDate.setDate(1);
  newDate.setMonth(newDate.getMonth() + monthDiff);
  return newDate;
};

const chooseDatesToSet = (activeDateInput, newDate, dateRange = {}) => {
  const from = dateRange.from,
        to = dateRange.to;

  if (newDate) {
    if ((0, _isEmpty.default)(dateRange) || Number(newDate) === Number(from) || Number(newDate) === Number(to)) {
      return ['to', 'from'];
    } else if (from && newDate < from) {
      return ['from'];
    } else if (to && newDate > to) {
      return ['to'];
    }
  }

  return [activeDateInput];
};

const isDateRangeInView = (dateRange, viewMonth) => {
  if (!dateRange.from || !dateRange.to) {
    return false;
  }

  const monthOneTimestamp = viewMonth.getTime();
  const monthTwoTimestamp = transformMonth(viewMonth, 2).getTime();
  const fromTimestamp = dateRange.from.getTime();
  const toTimestamp = dateRange.to.getTime();

  if (fromTimestamp < monthOneTimestamp || toTimestamp >= monthTwoTimestamp) {
    return false;
  }

  return true;
};

const InputDateRange = (0, _react.forwardRef)(({
  'aria-labelledby': ariaLabelledby,
  dateStringLocale,
  defaultValue = {},
  disabled,
  id,
  localization,
  onChange,
  onValidationFail,
  readOnly,
  validationType,
  value
}, ref) => {
  (0, _useReadOnlyWarn.useReadOnlyWarn)('InputDateRange', value, onChange);

  const _useState = (0, _react.useState)(value || defaultValue),
        _useState2 = _slicedToArray(_useState, 2),
        dateRange = _useState2[0],
        setDateRange = _useState2[1];

  const _useState3 = (0, _react.useState)('from'),
        _useState4 = _slicedToArray(_useState3, 2),
        activeDateInput = _useState4[0],
        setActiveDateInput = _useState4[1];

  const _useState5 = (0, _react.useState)(value && value.from ? value.from : defaultValue && defaultValue.from ? defaultValue.from : new Date(Date.now())),
        _useState6 = _slicedToArray(_useState5, 2),
        viewMonth = _useState6[0],
        setViewMonth = _useState6[1];

  const viewNextMonth = new Date(viewMonth);
  viewNextMonth.setMonth(viewNextMonth.getMonth() + 1);

  const _useState7 = (0, _react.useState)((0, _i18n.formatDateString)(dateRange.from, dateStringLocale)),
        _useState8 = _slicedToArray(_useState7, 2),
        fromTextInputValue = _useState8[0],
        setFromTextInputValue = _useState8[1];

  const _useState9 = (0, _react.useState)(validationType !== 'error'),
        _useState10 = _slicedToArray(_useState9, 2),
        validFromDate = _useState10[0],
        setValidFromDate = _useState10[1];

  const fromID = (0, _useID.useID)(id && `from-${id}`);

  const _useState11 = (0, _react.useState)((0, _i18n.formatDateString)(dateRange.to, dateStringLocale)),
        _useState12 = _slicedToArray(_useState11, 2),
        toTextInputValue = _useState12[0],
        setToTextInputValue = _useState12[1];

  const _useState13 = (0, _react.useState)(validationType !== 'error'),
        _useState14 = _slicedToArray(_useState13, 2),
        validToDate = _useState14[0],
        setValidToDate = _useState14[1];

  const toID = (0, _useID.useID)(id && `to-${id}`);
  const inputs = {
    from: {
      isValid: validFromDate,
      setIsValid: setValidFromDate,
      setValue: setFromTextInputValue,
      value: fromTextInputValue
    },
    to: {
      isValid: validToDate,
      setIsValid: setValidToDate,
      setValue: setToTextInputValue,
      value: toTextInputValue
    }
  };
  (0, _react.useEffect)(() => {
    if (value && !(0, _isEqual.default)(value, dateRange)) {
      setDateRange(value);
      value.from && inputs.from.setValue((0, _i18n.formatDateString)(value.from, dateStringLocale));
      value.to && inputs.to.setValue((0, _i18n.formatDateString)(value.to, dateStringLocale));
      value.from && !isDateRangeInView(value, viewMonth) && setViewMonth(value.from);
    }
  }, [inputs.from, inputs.to, value, onChange]);

  const toggleActiveDateInput = () => {
    if (activeDateInput === 'from') {
      setActiveDateInput('to');
    } else {
      setActiveDateInput('from');
    }
  };

  const handleDateChange = (datesToSet, date) => {
    const newDateRange = _objectSpread(_objectSpread({}, dateRange), datesToSet.reduce((r, endpoint) => _objectSpread(_objectSpread({}, r), {}, {
      [endpoint]: date
    }), {}));

    if (activeDateInput === 'from') {
      newDateRange.to = (0, _max.default)((0, _values.default)(newDateRange));
      newDateRange.from = (0, _min.default)((0, _values.default)(newDateRange));
    } else {
      newDateRange.from = (0, _min.default)((0, _values.default)(newDateRange));
      newDateRange.to = (0, _max.default)((0, _values.default)(newDateRange));
    }

    const nonActiveInput = datesToSet[0] === 'from' ? 'to' : 'from';
    inputs[nonActiveInput].setValue((0, _i18n.formatDateString)(newDateRange[nonActiveInput], dateStringLocale));

    if (!validationType) {
      inputs.from.isValid || inputs.from.setIsValid(true);
      inputs.to.isValid || inputs.to.setIsValid(true);
    }

    setDateRange(newDateRange);

    if ((0, _isFunction.default)(onChange)) {
      onChange(newDateRange);
    }
  };

  const handleCalendarClick = date => {
    const datesToSet = chooseDatesToSet(activeDateInput, date, dateRange);

    var _iterator = _createForOfIteratorHelper(datesToSet),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        const d = _step.value;
        inputs[d].setValue((0, _i18n.formatDateString)(date, dateStringLocale));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    if (datesToSet[0] === activeDateInput && datesToSet.length === 1) {
      toggleActiveDateInput();
    }

    handleDateChange(datesToSet, date);
  };

  const handleTextInputChange = e => {
    const value = e.target.value;
    inputs[activeDateInput].setValue(value);

    if (value.length === 0) {
      const inactiveDateInput = activeDateInput === 'from' ? 'to' : 'from';

      if (inputs[inactiveDateInput].value === '') {
        handleDateChange([activeDateInput, inactiveDateInput]);
      } else {
        handleDateChange([activeDateInput]);
      }
    } else {
      const parsedValue = (0, _i18n.parseDateFromString)(value, dateStringLocale);

      if (parsedValue) {
        const newMonthFocus = activeDateInput === 'to' ? transformMonth(parsedValue, -1) : parsedValue;
        setViewMonth(newMonthFocus);
        handleDateChange([activeDateInput], parsedValue);
      }
    }
  };

  const handleValidation = e => {
    if (!validationType) {
      const value = e.target.value;
      const isValid = value.length === 0 || !!(0, _i18n.parseDateFromString)(value, dateStringLocale);
      inputs[activeDateInput].setIsValid(isValid);

      if (!isValid && (0, _isFunction.default)(onValidationFail)) {
        onValidationFail(value);
      }
    }
  };

  const handleNextClick = () => {
    setViewMonth(transformMonth(viewMonth, 1));
  };

  const handlePrevClick = () => {
    setViewMonth(transformMonth(viewMonth, -1));
  };

  const handleNowClick = () => {
    setViewMonth(new Date(Date.now()));
  };

  const handleTextInputFocus = label => setActiveDateInput(label);

  const handleMonthChange = (viewMonthDiff, month) => {
    setViewMonth(transformMonth(month, viewMonthDiff));
  };

  const _useTranslation = (0, _reactI18next.useTranslation)('InputDateRange'),
        t = _useTranslation.t;

  const startDateLabelledby = `startDate-labelledby-${id}`;
  const endDateLabelledby = `endDate-labelledby-${id}`;

  const _formatMonthTitle = (0, _Calendar.formatMonthTitle)(localization);

  const monthTitle = `${_formatMonthTitle(viewMonth)} ${_formatMonthTitle(viewNextMonth)}`;
  return _react.default.createElement(InputDateRangeWrapper, {
    ref: ref
  }, _react.default.createElement(InputTextGroupWrapper, {
    disabled: disabled,
    active: activeDateInput === 'from',
    validationType: inputs.from.isValid && inputs.to.isValid ? undefined : 'error'
  }, _react.default.createElement(InputTextWrapper, {
    inputLength: inputs.from.value.length
  }, _react.default.createElement(_VisuallyHidden.VisuallyHidden, {
    id: startDateLabelledby
  }, t('Start date')), _react.default.createElement(_InlineInputText.InlineInputTextBase, {
    placeholder: `${(0, _i18n.formatDateString)(new Date(Date.now()), dateStringLocale)}`,
    disabled: disabled,
    "data-testid": "date-from-text-input",
    fontSize: "small",
    id: fromID,
    onBlur: handleValidation,
    onChange: handleTextInputChange,
    onFocus: (0, _partial.default)(handleTextInputFocus, 'from'),
    readOnly: readOnly,
    value: inputs.from.value,
    "aria-labelledby": `${ariaLabelledby} ${startDateLabelledby}`
  })), _react.default.createElement(HyphenWrapper, {
    hasInputValues: !(0, _isEmpty.default)(dateRange),
    "aria-hidden": "true"
  }, "\u2013"), _react.default.createElement(InputTextWrapper, {
    inputLength: inputs.to.value.length
  }, _react.default.createElement(_VisuallyHidden.VisuallyHidden, {
    id: endDateLabelledby
  }, t('End date')), _react.default.createElement(_InlineInputText.InlineInputTextBase, {
    placeholder: (0, _i18n.formatDateString)(new Date(Date.now()), dateStringLocale),
    disabled: disabled,
    fontSize: "small",
    "data-testid": "date-to-text-input",
    id: toID,
    onBlur: handleValidation,
    onChange: handleTextInputChange,
    onFocus: (0, _partial.default)(handleTextInputFocus, 'to'),
    readOnly: readOnly,
    value: inputs.to.value,
    "aria-labelledby": `${ariaLabelledby} ${endDateLabelledby}`
  })), inputs.from.isValid && inputs.to.isValid || _react.default.createElement(_InputText.ErrorIcon, null)), _react.default.createElement(MultiCalendarLayout, null, _react.default.createElement(_VisuallyHidden.VisuallyHidden, {
    "aria-live": "assertive"
  }, monthTitle), _react.default.createElement(CalendarWrapper, null, _react.default.createElement(_Calendar.Calendar, {
    disabled: disabled,
    localization: localization,
    onDayClick: handleCalendarClick,
    onMonthChange: (0, _partial.default)(handleMonthChange, 0),
    onNowClick: handleNowClick,
    onPrevClick: handlePrevClick,
    readOnly: readOnly,
    selectedDates: dateRange,
    showNextButton: false,
    viewMonth: viewMonth
  })), _react.default.createElement(CalendarWrapper, null, _react.default.createElement(_Calendar.Calendar, {
    disabled: disabled,
    localization: localization,
    onDayClick: handleCalendarClick,
    onMonthChange: (0, _partial.default)(handleMonthChange, -1),
    onNextClick: handleNextClick,
    onNowClick: handleNowClick,
    readOnly: readOnly,
    selectedDates: dateRange,
    showPreviousButton: false,
    viewMonth: viewNextMonth
  }))));
});
exports.InputDateRange = InputDateRange;
InputDateRange.displayName = 'InputDateRange';

const HyphenWrapper = _styledComponents.default.div.withConfig({
  displayName: "InputDateRange__HyphenWrapper",
  componentId: "sc-1mk7l5x-0"
})(["color:", ";"], ({
  theme,
  hasInputValues
}) => hasInputValues ? theme.colors.text3 : theme.colors.text1);

const InputDateRangeWrapper = _styledComponents.default.div.withConfig({
  displayName: "InputDateRange__InputDateRangeWrapper",
  componentId: "sc-1mk7l5x-1"
})(["width:100%;@media screen and (max-width:", "){display:grid;justify-items:center;}"], ({
  theme
}) => theme.breakpoints[1]);

const MultiCalendarLayout = _styledComponents.default.div.withConfig({
  displayName: "InputDateRange__MultiCalendarLayout",
  componentId: "sc-1mk7l5x-2"
})(["display:inline-grid;grid-column-gap:", ";grid-row-gap:", ";grid-template-columns:1fr 1fr;@media screen and (max-width:", "){grid-template-columns:1fr;margin:0 auto;}"], ({
  theme
}) => theme.space.large, ({
  theme
}) => theme.space.medium, ({
  theme
}) => theme.breakpoints[1]);

const InputTextGroupWrapper = _styledComponents.default.div.withConfig({
  displayName: "InputDateRange__InputTextGroupWrapper",
  componentId: "sc-1mk7l5x-3"
})(["", " align-items:center;display:grid;font-family:", ";grid-gap:", ";grid-template-columns:auto auto auto 1fr;padding:0 ", ";width:100%;&:hover{", "}&:focus-within{", "}", " ", " ", "{justify-self:right;margin-right:", ";}"], _InputText.inputCSS, ({
  theme
}) => theme.fonts.body, ({
  theme
}) => theme.space.xsmall, ({
  theme: {
    space
  }
}) => space.small, _InputText.inputTextHover, _InputText.inputTextFocus, _InputText.inputTextValidation, ({
  disabled
}) => disabled && _InputText.inputTextDisabled, _InputText.ErrorIcon, ({
  theme
}) => theme.space.xxsmall);

const InputTextWrapper = _styledComponents.default.div.withConfig({
  displayName: "InputDateRange__InputTextWrapper",
  componentId: "sc-1mk7l5x-4"
})(["padding:", " 0;", "{align-self:center;height:", ";&:focus-within{background:", ";}}"], ({
  theme: {
    space
  }
}) => space.xxsmall, _InlineInputText.InlineInputTextBase, ({
  theme
}) => theme.lineHeights.large, ({
  theme
}) => theme.colors.keyAccent);

const CalendarWrapper = _styledComponents.default.div.withConfig({
  displayName: "InputDateRange__CalendarWrapper",
  componentId: "sc-1mk7l5x-5"
})(["", "{padding:0;}"], _Calendar.Calendar);
//# sourceMappingURL=InputDateRange.js.map