{"version":3,"sources":["../../../../../src/Form/Inputs/InputDateRange/InputDateRange.tsx"],"names":["transformMonth","date","Date","now","monthDiff","newDate","setDate","setMonth","getMonth","chooseDatesToSet","activeDateInput","dateRange","from","to","Number","isDateRangeInView","viewMonth","monthOneTimestamp","getTime","monthTwoTimestamp","fromTimestamp","toTimestamp","InputDateRange","ariaLabelledby","dateStringLocale","defaultValue","disabled","id","localization","onChange","onValidationFail","readOnly","validationType","value","ref","setDateRange","setActiveDateInput","setViewMonth","viewNextMonth","fromTextInputValue","setFromTextInputValue","validFromDate","setValidFromDate","fromID","toTextInputValue","setToTextInputValue","validToDate","setValidToDate","toID","inputs","isValid","setIsValid","setValue","toggleActiveDateInput","handleDateChange","datesToSet","newDateRange","reduce","r","endpoint","nonActiveInput","handleCalendarClick","d","length","handleTextInputChange","e","target","inactiveDateInput","parsedValue","newMonthFocus","handleValidation","handleNextClick","handlePrevClick","handleNowClick","handleTextInputFocus","label","handleMonthChange","viewMonthDiff","month","t","startDateLabelledby","endDateLabelledby","_formatMonthTitle","monthTitle","undefined","displayName","HyphenWrapper","styled","div","theme","hasInputValues","colors","text3","text1","InputDateRangeWrapper","breakpoints","MultiCalendarLayout","space","large","medium","InputTextGroupWrapper","inputCSS","fonts","body","xsmall","small","inputTextHover","inputTextFocus","inputTextValidation","inputTextDisabled","ErrorIcon","xxsmall","InputTextWrapper","InlineInputTextBase","lineHeights","keyAccent","CalendarWrapper","Calendar"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport React, {\n  FC,\n  useState,\n  SyntheticEvent,\n  useEffect,\n  forwardRef,\n  Ref,\n} from 'react'\nimport { RangeModifier } from 'react-day-picker'\nimport styled from 'styled-components'\nimport isFunction from 'lodash/isFunction'\nimport partial from 'lodash/partial'\nimport min from 'lodash/min'\nimport max from 'lodash/max'\nimport isEmpty from 'lodash/isEmpty'\nimport isEqual from 'lodash/isEqual'\nimport values from 'lodash/values'\nimport { useTranslation } from 'react-i18next'\nimport { VisuallyHidden } from '../../../VisuallyHidden'\nimport { ValidationType } from '../../ValidationMessage'\nimport {\n  inputCSS,\n  inputTextHover,\n  inputTextFocus,\n  inputTextValidation,\n  inputTextDisabled,\n  ErrorIcon,\n} from '../InputText'\nimport { InlineInputTextBase } from '../../Inputs/InlineInputText'\nimport {\n  Calendar,\n  CalendarLocalization,\n  formatMonthTitle,\n} from '../../../Calendar'\nimport {\n  Locales,\n  formatDateString,\n  parseDateFromString,\n} from '../../../utils/i18n'\nimport { useID } from '../../../utils/useID'\nimport { useReadOnlyWarn } from '../../../utils/useReadOnlyWarn'\n\nexport interface InputDateRangeProps {\n  'aria-labelledby'?: string\n  disabled?: boolean\n  dateStringLocale?: Locales\n  defaultValue?: Partial<RangeModifier>\n  id?: string\n  localization?: CalendarLocalization\n  onChange?: (range?: Partial<RangeModifier>) => void\n  onValidationFail?: (value: string) => void\n  readOnly?: boolean\n  ref?: Ref<HTMLDivElement>\n  validationType?: ValidationType\n  value?: Partial<RangeModifier>\n}\n\ntype Endpoint = 'to' | 'from'\n\n// Add or subtract given number of months to provided date\nconst transformMonth = (\n  // eslint-disable-next-line default-param-last\n  date: Date = new Date(Date.now()),\n  monthDiff: number\n) => {\n  const newDate = new Date(date)\n  newDate.setDate(1) // normalize to 1st of the month, so that no impossible dates are returned (e.g. Feb 31)\n  newDate.setMonth(newDate.getMonth() + monthDiff)\n  return newDate\n}\n\n// Decide which dates (from, to, or both) get updated based on active state and current value\n// Example: if newDate is later than dateRange.to, update dateRange.to regardless of the\n// activeDateInput value.\nconst chooseDatesToSet = (\n  activeDateInput: Endpoint,\n  newDate?: Date,\n  dateRange: Partial<RangeModifier> = {}\n): Endpoint[] => {\n  const { from, to } = dateRange\n  if (newDate) {\n    if (\n      isEmpty(dateRange) ||\n      Number(newDate) === Number(from) ||\n      Number(newDate) === Number(to)\n    ) {\n      return ['to', 'from'] // update both\n    } else if (from && newDate < from) {\n      return ['from']\n    } else if (to && newDate > to) {\n      return ['to']\n    }\n  }\n  return [activeDateInput]\n}\n\nconst isDateRangeInView = (\n  dateRange: Partial<RangeModifier>,\n  viewMonth: Date\n) => {\n  if (!dateRange.from || !dateRange.to) {\n    return false\n  }\n  const monthOneTimestamp = viewMonth.getTime()\n  const monthTwoTimestamp = transformMonth(viewMonth, 2).getTime()\n  const fromTimestamp = dateRange.from.getTime()\n  const toTimestamp = dateRange.to.getTime()\n\n  if (fromTimestamp < monthOneTimestamp || toTimestamp >= monthTwoTimestamp) {\n    return false\n  }\n\n  return true\n}\n\nexport const InputDateRange: FC<InputDateRangeProps> = forwardRef(\n  (\n    {\n      'aria-labelledby': ariaLabelledby,\n      dateStringLocale,\n      defaultValue = {},\n      disabled,\n      id,\n      localization,\n      onChange,\n      onValidationFail,\n      readOnly,\n      validationType,\n      value,\n    },\n    ref: Ref<HTMLDivElement>\n  ) => {\n    useReadOnlyWarn('InputDateRange', value, onChange)\n\n    /*\n     * JOINT State\n     */\n    const [dateRange, setDateRange] = useState<Partial<RangeModifier>>(\n      value || defaultValue\n    )\n\n    // toggle between selecting start and end dates\n    const [activeDateInput, setActiveDateInput] = useState<Endpoint>('from')\n\n    // Calendar 1 view\n    const [viewMonth, setViewMonth] = useState<Date>(\n      value && value.from\n        ? value.from\n        : defaultValue && defaultValue.from\n        ? defaultValue.from\n        : new Date(Date.now())\n    )\n\n    // Calendar 2 view\n    const viewNextMonth = new Date(viewMonth)\n    viewNextMonth.setMonth(viewNextMonth.getMonth() + 1)\n\n    /*\n     * FROM State\n     */\n    const [fromTextInputValue, setFromTextInputValue] = useState(\n      formatDateString(dateRange.from, dateStringLocale)\n    )\n    const [validFromDate, setValidFromDate] = useState(\n      validationType !== 'error'\n    )\n    const fromID = useID(id && `from-${id}`)\n\n    /*\n     * TO State\n     */\n    const [toTextInputValue, setToTextInputValue] = useState(\n      formatDateString(dateRange.to, dateStringLocale)\n    )\n    const [validToDate, setValidToDate] = useState(validationType !== 'error')\n    const toID = useID(id && `to-${id}`)\n\n    /*\n     * Combine state into one easily traversable object\n     */\n    const inputs = {\n      from: {\n        isValid: validFromDate,\n        setIsValid: setValidFromDate,\n        setValue: setFromTextInputValue,\n        value: fromTextInputValue,\n      },\n      to: {\n        isValid: validToDate,\n        setIsValid: setValidToDate,\n        setValue: setToTextInputValue,\n        value: toTextInputValue,\n      },\n    }\n\n    /*\n     * Set up necessary callbacks\n     */\n\n    useEffect(() => {\n      // controlled component: update state when value changes externally\n      if (value && !isEqual(value, dateRange)) {\n        setDateRange(value)\n        value.from &&\n          inputs.from.setValue(formatDateString(value.from, dateStringLocale))\n        value.to &&\n          inputs.to.setValue(formatDateString(value.to, dateStringLocale))\n        value.from &&\n          !isDateRangeInView(value, viewMonth) &&\n          setViewMonth(value.from)\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [inputs.from, inputs.to, value, onChange])\n\n    const toggleActiveDateInput = () => {\n      if (activeDateInput === 'from') {\n        setActiveDateInput('to')\n      } else {\n        setActiveDateInput('from')\n      }\n    }\n\n    const handleDateChange = (datesToSet: Endpoint[], date?: Date) => {\n      /* eslint-disable sort-keys-fix/sort-keys-fix */\n      const newDateRange: Partial<RangeModifier> = {\n        ...dateRange,\n        ...datesToSet.reduce(\n          (r: Partial<RangeModifier>, endpoint) => ({\n            ...r,\n            [endpoint]: date,\n          }),\n          {}\n        ),\n      }\n\n      // prevent reversed date ranges like Feb 23 - Jan 1\n      // also make sure that there is always a `from` and `to` value\n      if (activeDateInput === 'from') {\n        // process `to` first so that you can always push the date range later than current `to` value\n        newDateRange.to = max(values(newDateRange))\n        newDateRange.from = min(values(newDateRange))\n      } else {\n        // process `from` first so that you can always push the date range earlier than current `from` value\n        newDateRange.from = min(values(newDateRange))\n        newDateRange.to = max(values(newDateRange))\n      }\n\n      // update input boxes to match selected dates\n      // only update inactive input so as not to block manual keyboard input\n      const nonActiveInput = datesToSet[0] === 'from' ? 'to' : 'from'\n      inputs[nonActiveInput].setValue(\n        formatDateString(newDateRange[nonActiveInput], dateStringLocale)\n      )\n\n      if (!validationType) {\n        // clear potentially stale date validation errors\n        inputs.from.isValid || inputs.from.setIsValid(true)\n        inputs.to.isValid || inputs.to.setIsValid(true)\n      }\n\n      // update final selected date range\n      setDateRange(newDateRange)\n      if (isFunction(onChange)) {\n        onChange(newDateRange)\n      }\n    }\n\n    const handleCalendarClick = (date: Date) => {\n      const datesToSet = chooseDatesToSet(activeDateInput, date, dateRange)\n      for (const d of datesToSet) {\n        inputs[d].setValue(formatDateString(date, dateStringLocale))\n      }\n      if (datesToSet[0] === activeDateInput && datesToSet.length === 1) {\n        toggleActiveDateInput()\n      }\n      handleDateChange(datesToSet, date)\n    }\n\n    const handleTextInputChange = (e: SyntheticEvent<HTMLInputElement>) => {\n      const value = (e.target as HTMLInputElement).value\n      inputs[activeDateInput].setValue(value)\n\n      if (value.length === 0) {\n        const inactiveDateInput = activeDateInput === 'from' ? 'to' : 'from'\n        if (inputs[inactiveDateInput].value === '') {\n          handleDateChange([activeDateInput, inactiveDateInput])\n        } else {\n          handleDateChange([activeDateInput])\n        }\n      } else {\n        const parsedValue = parseDateFromString(value, dateStringLocale)\n        if (parsedValue) {\n          const newMonthFocus =\n            activeDateInput === 'to'\n              ? transformMonth(parsedValue, -1)\n              : parsedValue\n          setViewMonth(newMonthFocus)\n          handleDateChange([activeDateInput], parsedValue)\n        }\n      }\n    }\n\n    const handleValidation = (e: SyntheticEvent<HTMLInputElement>) => {\n      // only revalidate if validationType is not set externally\n      if (!validationType) {\n        const value = (e.target as HTMLInputElement).value\n        // is valid if text input is blank or parseDateFromString returns a date object\n        const isValid =\n          value.length === 0 || !!parseDateFromString(value, dateStringLocale)\n        inputs[activeDateInput].setIsValid(isValid)\n        if (!isValid && isFunction(onValidationFail)) {\n          onValidationFail(value)\n        }\n      }\n    }\n\n    const handleNextClick = () => {\n      setViewMonth(transformMonth(viewMonth, 1))\n    }\n\n    const handlePrevClick = () => {\n      setViewMonth(transformMonth(viewMonth, -1))\n    }\n\n    const handleNowClick = () => {\n      setViewMonth(new Date(Date.now()))\n    }\n\n    const handleTextInputFocus = (label: Endpoint) => setActiveDateInput(label)\n\n    const handleMonthChange = (viewMonthDiff: number, month: Date) => {\n      setViewMonth(transformMonth(month, viewMonthDiff))\n    }\n\n    const { t } = useTranslation('InputDateRange')\n    const startDateLabelledby = `startDate-labelledby-${id}`\n    const endDateLabelledby = `endDate-labelledby-${id}`\n\n    const _formatMonthTitle = formatMonthTitle(localization)\n    const monthTitle = `${_formatMonthTitle(viewMonth)} ${_formatMonthTitle(\n      viewNextMonth\n    )}`\n\n    return (\n      <InputDateRangeWrapper ref={ref}>\n        <InputTextGroupWrapper\n          disabled={disabled}\n          active={activeDateInput === 'from'}\n          validationType={\n            inputs.from.isValid && inputs.to.isValid ? undefined : 'error'\n          }\n        >\n          <InputTextWrapper inputLength={inputs.from.value.length}>\n            <VisuallyHidden id={startDateLabelledby}>\n              {t('Start date')}\n            </VisuallyHidden>\n            <InlineInputTextBase\n              placeholder={`${formatDateString(\n                new Date(Date.now()),\n                dateStringLocale\n              )}`}\n              disabled={disabled}\n              data-testid=\"date-from-text-input\"\n              fontSize=\"small\"\n              id={fromID}\n              onBlur={handleValidation}\n              onChange={handleTextInputChange}\n              onFocus={partial(handleTextInputFocus, 'from')}\n              readOnly={readOnly}\n              value={inputs.from.value}\n              aria-labelledby={`${ariaLabelledby} ${startDateLabelledby}`}\n            />\n          </InputTextWrapper>\n          <HyphenWrapper\n            hasInputValues={!isEmpty(dateRange)}\n            aria-hidden=\"true\"\n          >\n            &ndash;\n          </HyphenWrapper>\n          <InputTextWrapper inputLength={inputs.to.value.length}>\n            <VisuallyHidden id={endDateLabelledby}>\n              {t('End date')}\n            </VisuallyHidden>\n            <InlineInputTextBase\n              placeholder={formatDateString(\n                new Date(Date.now()),\n                dateStringLocale\n              )}\n              disabled={disabled}\n              fontSize=\"small\"\n              data-testid=\"date-to-text-input\"\n              id={toID}\n              onBlur={handleValidation}\n              onChange={handleTextInputChange}\n              onFocus={partial(handleTextInputFocus, 'to')}\n              readOnly={readOnly}\n              value={inputs.to.value}\n              aria-labelledby={`${ariaLabelledby} ${endDateLabelledby}`}\n            />\n          </InputTextWrapper>\n          {(inputs.from.isValid && inputs.to.isValid) || <ErrorIcon />}\n        </InputTextGroupWrapper>\n        <MultiCalendarLayout>\n          <VisuallyHidden aria-live=\"assertive\">{monthTitle}</VisuallyHidden>\n          <CalendarWrapper>\n            <Calendar\n              disabled={disabled}\n              localization={localization}\n              onDayClick={handleCalendarClick}\n              onMonthChange={partial(handleMonthChange, 0)}\n              onNowClick={handleNowClick}\n              onPrevClick={handlePrevClick}\n              readOnly={readOnly}\n              selectedDates={dateRange as RangeModifier}\n              showNextButton={false}\n              viewMonth={viewMonth}\n            />\n          </CalendarWrapper>\n          <CalendarWrapper>\n            <Calendar\n              disabled={disabled}\n              localization={localization}\n              onDayClick={handleCalendarClick}\n              onMonthChange={partial(handleMonthChange, -1)}\n              onNextClick={handleNextClick}\n              onNowClick={handleNowClick}\n              readOnly={readOnly}\n              selectedDates={dateRange as RangeModifier}\n              showPreviousButton={false}\n              viewMonth={viewNextMonth}\n            />\n          </CalendarWrapper>\n        </MultiCalendarLayout>\n      </InputDateRangeWrapper>\n    )\n  }\n)\n\nInputDateRange.displayName = 'InputDateRange'\n\nconst HyphenWrapper = styled.div<{ hasInputValues: boolean }>`\n  color: ${({ theme, hasInputValues }) =>\n    hasInputValues ? theme.colors.text3 : theme.colors.text1};\n`\nconst InputDateRangeWrapper = styled.div`\n  width: 100%;\n\n  /* stylelint-disable media-feature-name-no-unknown */\n  @media screen and (max-width: ${({ theme }) => theme.breakpoints[1]}) {\n    display: grid;\n    justify-items: center;\n  }\n`\n\nconst MultiCalendarLayout = styled.div`\n  display: inline-grid;\n  grid-column-gap: ${({ theme }) => theme.space.large};\n  grid-row-gap: ${({ theme }) => theme.space.medium};\n  grid-template-columns: 1fr 1fr;\n  @media screen and (max-width: ${({ theme }) => theme.breakpoints[1]}) {\n    grid-template-columns: 1fr;\n    margin: 0 auto;\n  }\n`\n\ninterface InputTextGroupWrapperProps {\n  active: boolean\n  disabled?: boolean\n  validationType?: 'error'\n}\n\nconst InputTextGroupWrapper = styled.div<InputTextGroupWrapperProps>`\n  ${inputCSS}\n  align-items: center;\n  display: grid;\n  font-family: ${({ theme }) => theme.fonts.body};\n  grid-gap: ${({ theme }) => theme.space.xsmall};\n  grid-template-columns: auto auto auto 1fr;\n  padding: 0 ${({ theme: { space } }) => space.small};\n  width: 100%;\n  &:hover {\n    ${inputTextHover}\n  }\n\n  &:focus-within {\n    ${inputTextFocus}\n  }\n\n  ${inputTextValidation}\n\n  ${({ disabled }) => disabled && inputTextDisabled}\n\n  ${ErrorIcon} {\n    justify-self: right;\n    margin-right: ${({ theme }) => theme.space.xxsmall};\n  }\n`\n\nconst InputTextWrapper = styled.div<{ inputLength: number }>`\n  padding: ${({ theme: { space } }) => space.xxsmall} 0;\n  ${InlineInputTextBase} {\n    align-self: center;\n    height: ${({ theme }) => theme.lineHeights.large};\n\n    &:focus-within {\n      background: ${({ theme }) => theme.colors.keyAccent};\n    }\n  }\n`\n\nconst CalendarWrapper = styled.div`\n  ${Calendar} {\n    padding: 0;\n  }\n`\n"],"file":"InputDateRange.js"}