"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputColor = exports.InputColorComponent = void 0;

require("core-js/modules/es.array.index-of.js");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _utils = require("../../../utils");

var _Popover = require("../../../Popover");

var _InputText = require("../InputText");

var _Form = require("../../Form");

var _Swatch = require("./Swatch");

var _utils2 = require("./utils");

var _ColorPicker = require("./ColorPicker");

var _dimensions = require("./dimensions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const createEventWithHSVValue = (color, name) => {
  return {
    currentTarget: {
      name,
      value: typeof color === 'string' ? color : (0, _utils2.simpleHsvToHex)(color)
    },
    target: {
      name,
      value: typeof color === 'string' ? color : (0, _utils2.simpleHsvToHex)(color)
    }
  };
};

function getColorFromText(text) {
  return text && (0, _utils2.isValidColor)(text) ? (0, _utils2.stringToSimpleHsv)(text) : undefined;
}

const InputColorComponent = (0, _react.forwardRef)((_ref, ref) => {
  let className = _ref.className,
      hideInput = _ref.hideInput,
      id = _ref.id,
      onChange = _ref.onChange,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      value = _ref.value,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? '' : _ref$defaultValue,
      disabled = _ref.disabled,
      readOnly = _ref.readOnly,
      props = _objectWithoutProperties(_ref, ["className", "hideInput", "id", "onChange", "onFocus", "onBlur", "value", "defaultValue", "disabled", "readOnly"]);

  const inputID = (0, _utils.useID)(id);
  const validationMessage = (0, _Form.useFormContext)(props);
  const initialColor = getColorFromText(value || defaultValue);

  const _useState = (0, _react.useState)(initialColor),
        _useState2 = _slicedToArray(_useState, 2),
        color = _useState2[0],
        setColor = _useState2[1];

  const _useState3 = (0, _react.useState)(value || defaultValue),
        _useState4 = _slicedToArray(_useState3, 2),
        inputTextValue = _useState4[0],
        setInputTextValue = _useState4[1];

  const _useState5 = (0, _react.useState)(false),
        _useState6 = _slicedToArray(_useState5, 2),
        isFocused = _useState6[0],
        setIsFocused = _useState6[1];

  const handleFocus = () => setIsFocused(true);

  const handleBlur = () => setIsFocused(false);

  const wrappedOnFocus = (0, _utils.useWrapEvent)(handleFocus, onFocus);
  const wrappedOnBlur = (0, _utils.useWrapEvent)(handleBlur, onBlur);
  (0, _react.useEffect)(() => {
    if (value && value !== inputTextValue) {
      setColor((0, _utils2.stringToSimpleHsv)(value));
      !isFocused && setInputTextValue(value);
    }
  }, [isFocused, value, inputTextValue]);

  const callOnChange = newColor => {
    if (!onChange || !newColor) return;
    onChange(createEventWithHSVValue(newColor, props.name));
  };

  const setColorState = newColor => {
    setColor(newColor);
    newColor && setInputTextValue((0, _utils2.simpleHsvToHex)(newColor));
    callOnChange(newColor);
  };

  const handleInputTextChange = event => {
    const newValue = event.currentTarget.value;
    setInputTextValue(newValue);
    const isValid = (0, _utils2.isValidColor)(newValue);
    callOnChange(isValid ? newValue : undefined);
    setColor(getColorFromText(event.currentTarget.value));
  };

  const content = _react.default.createElement(_Popover.PopoverContent, {
    p: "medium"
  }, _react.default.createElement(_ColorPicker.ColorPicker, {
    hsv: color || {
      h: 0,
      s: 1,
      v: 1
    },
    setHsv: setColorState,
    width: _dimensions.DEFAULT_INPUT_COLOR_WIDTH
  }));

  const _usePopover = (0, _Popover.usePopover)({
    content
  }),
        popover = _usePopover.popover,
        domProps = _usePopover.domProps;

  return _react.default.createElement("div", {
    className: className
  }, _react.default.createElement(_Swatch.Swatch, _extends({
    color: color ? (0, _utils2.hsvToHex)(color) : undefined,
    disabled: disabled,
    readOnly: readOnly
  }, domProps)), !disabled && !readOnly && popover, !hideInput && _react.default.createElement(_InputText.InputText, _extends({}, props, {
    "aria-describedby": `describedby-${id}`,
    id: inputID,
    ref: ref,
    disabled: disabled,
    readOnly: readOnly,
    validationType: validationMessage && validationMessage.type,
    onChange: handleInputTextChange,
    value: inputTextValue,
    onFocus: wrappedOnFocus,
    onBlur: wrappedOnBlur
  })));
});
exports.InputColorComponent = InputColorComponent;
InputColorComponent.displayName = 'InputColorComponent';
const InputColor = (0, _styledComponents.default)(InputColorComponent).withConfig({
  displayName: "InputColor",
  componentId: "s77c8w-0"
})(["display:flex;", "{border-radius:", ";border-bottom-left-radius:", ";border-right:", ";border-top-left-radius:", ";}", "{border-radius:", ";border-bottom-right-radius:", ";border-top-right-radius:", ";}"], _Swatch.Swatch, ({
  hideInput,
  theme: {
    radii
  }
}) => hideInput ? radii.medium : radii.none, ({
  theme: {
    radii
  }
}) => radii.medium, ({
  hideInput
}) => hideInput ? undefined : 'none', ({
  theme: {
    radii
  }
}) => radii.medium, _InputText.InputText, ({
  theme: {
    radii
  }
}) => radii.none, ({
  theme: {
    radii
  }
}) => radii.medium, ({
  theme: {
    radii
  }
}) => radii.medium);
exports.InputColor = InputColor;
//# sourceMappingURL=InputColor.js.map