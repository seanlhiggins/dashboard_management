"use strict";

require("core-js/modules/es.weak-map.js");

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OverlaySurfaceContentArea = exports.OverlaySurface = void 0;

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _utils = require("../utils");

var _Dialog = require("../Dialog");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const OverlaySurfaceLayout = (0, _react.forwardRef)((props, forwardedRef) => {
  const children = props.children,
        className = props.className,
        eventHandlers = props.eventHandlers,
        placement = props.placement,
        style = props.style;

  const _useContext = (0, _react.useContext)(_Dialog.DialogContext),
        closeModal = _useContext.closeModal;

  const innerRef = (0, _react.useRef)(null);
  const ref = (0, _utils.useForkedRef)(forwardedRef, innerRef);
  (0, _utils.useGlobalHotkeys)('esc', closeModal, innerRef);
  return _react.default.createElement("div", _extends({
    ref: ref,
    style: style,
    className: className
  }, eventHandlers, {
    tabIndex: -1,
    "data-placement": placement
  }), _react.default.createElement(OverlaySurfaceContentArea, {
    tabIndex: -1,
    "data-overlay-surface": true
  }, children));
});
OverlaySurfaceLayout.displayName = 'OverlaySurfaceLayout';
const OverlaySurface = (0, _styledComponents.default)(OverlaySurfaceLayout).withConfig({
  displayName: "OverlaySurface",
  componentId: "wd3uv8-0"
})(["", " animation:", " ease-in;animation-duration:", ";max-width:", ";overflow:visible;z-index:", ";&[data-placement*='top']{padding-bottom:", ";}&[data-placement*='right']{padding-left:", ";}&[data-placement*='bottom']{padding-top:", ";}&[data-placement*='left']{padding-right:", ";}&:focus{outline:none;}"], _designTokens.reset, _designTokens.fadeIn, ({
  theme
}) => `${theme.transitions.quick}ms`, ({
  maxWidth
}) => maxWidth, ({
  theme: {
    zIndexFloor
  }
}) => zIndexFloor || undefined, ({
  theme: {
    space
  }
}) => space.xsmall, ({
  theme: {
    space
  }
}) => space.xsmall, ({
  theme: {
    space
  }
}) => space.xsmall, ({
  theme: {
    space
  }
}) => space.xsmall);
exports.OverlaySurface = OverlaySurface;

const OverlaySurfaceContentArea = _styledComponents.default.div.withConfig({
  displayName: "OverlaySurface__OverlaySurfaceContentArea",
  componentId: "wd3uv8-1"
})(["background:", ";border-radius:", ";box-shadow:", ";color:", ";&:focus{outline:none;}"], ({
  theme
}) => theme.colors.background, ({
  theme
}) => theme.radii.medium, ({
  theme
}) => theme.shadows[3], ({
  theme
}) => theme.colors.text);

exports.OverlaySurfaceContentArea = OverlaySurfaceContentArea;
//# sourceMappingURL=OverlaySurface.js.map