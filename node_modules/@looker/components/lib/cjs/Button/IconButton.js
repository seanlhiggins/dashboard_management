"use strict";

require("core-js/modules/es.weak-map.js");

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconButton = exports.IconButtonStyle = void 0;

require("core-js/modules/es.string.trim.js");

require("core-js/modules/es.array.index-of.js");

var _some = _interopRequireDefault(require("lodash/some"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _Icon = require("../Icon");

var _Tooltip = require("../Tooltip");

var _utils = require("../utils");

var _VisuallyHidden = require("../VisuallyHidden");

var _ButtonBase = require("./ButtonBase");

var _iconButtonColor = require("./iconButtonColor");

var _size = require("./size");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const IconButtonStyle = _styledComponents.default.button.withConfig({
  shouldForwardProp: _designTokens.shouldForwardProp
}).attrs(({
  type = 'button'
}) => ({
  type
})).withConfig({
  displayName: "IconButton__IconButtonStyle",
  componentId: "n9jti8-0"
})(["", " height:auto;"], ({
  focusVisible
}) => (0, _ButtonBase.buttonCSS)('neutral', focusVisible));

exports.IconButtonStyle = IconButtonStyle;
const IconButtonComponent = (0, _react.forwardRef)((props, forwardRef) => {
  const ariaExpanded = props['aria-expanded'],
        className = props.className,
        icon = props.icon,
        id = props.id,
        _props$size = props.size,
        size = _props$size === void 0 ? 'xsmall' : _props$size,
        label = props.label,
        toggle = props.toggle,
        tooltipDisabled = props.tooltipDisabled,
        tooltipPlacement = props.tooltipPlacement,
        tooltipTextAlign = props.tooltipTextAlign,
        tooltipWidth = props.tooltipWidth,
        propsOnFocus = props.onFocus,
        propsOnBlur = props.onBlur,
        propsOnMouseOver = props.onMouseOver,
        propsOnMouseOut = props.onMouseOut,
        rest = _objectWithoutProperties(props, ["aria-expanded", "className", "icon", "id", "size", "label", "toggle", "tooltipDisabled", "tooltipPlacement", "tooltipTextAlign", "tooltipWidth", "onFocus", "onBlur", "onMouseOver", "onMouseOut"]);

  const hasOuterTooltip = (0, _some.default)([propsOnFocus, propsOnBlur, propsOnMouseOver, propsOnMouseOut], _isFunction.default);

  const _useTooltip = (0, _Tooltip.useTooltip)({
    content: label,
    disabled: tooltipDisabled || hasOuterTooltip || ariaExpanded === true,
    id: id ? `${id}-tooltip` : undefined,
    placement: tooltipPlacement,
    textAlign: tooltipTextAlign,
    width: tooltipWidth
  }),
        _useTooltip$domProps = _useTooltip.domProps,
        ariaDescribedBy = _useTooltip$domProps['aria-describedby'],
        tooltipClassName = _useTooltip$domProps.className,
        ref = _useTooltip$domProps.ref,
        onFocus = _useTooltip$domProps.onFocus,
        onBlur = _useTooltip$domProps.onBlur,
        onMouseOver = _useTooltip$domProps.onMouseOver,
        onMouseOut = _useTooltip$domProps.onMouseOut,
        tooltip = _useTooltip.tooltip;

  const eventHandlers = {
    onBlur: (0, _utils.useWrapEvent)(onBlur, propsOnBlur),
    onFocus: (0, _utils.useWrapEvent)(onFocus, propsOnFocus),
    onMouseOut: (0, _utils.useWrapEvent)(onMouseOut, propsOnMouseOut),
    onMouseOver: (0, _utils.useWrapEvent)(onMouseOver, propsOnMouseOver)
  };
  const actualRef = (0, _utils.useForkedRef)(forwardRef, ref);
  return _react.default.createElement(_ButtonBase.GenericButtonBase, _extends({
    "aria-describedby": ariaDescribedBy,
    "aria-expanded": ariaExpanded,
    "aria-pressed": toggle ? true : undefined,
    ref: actualRef,
    p: "none",
    size: size,
    width: _size.buttonSizeMap[size],
    className: `${className} ${tooltipClassName}`.trim()
  }, eventHandlers, rest), _react.default.createElement(_VisuallyHidden.VisuallyHidden, null, label), _react.default.createElement(_Icon.Icon, {
    icon: icon,
    size: _size.iconButtonIconSizeMap[size]
  }), tooltip);
});
IconButtonComponent.displayName = 'IconButtonComponent';

const outlineCSS = props => {
  const shape = props.shape;
  return (0, _styledComponents.css)(["border:1px solid ", ";", " &:hover,&:focus,&.hover{border-color:", ";}&[aria-expanded='true'],&:active,&.active{border-color:", ";}&[disabled]{&:hover,&:active,&:focus{border-color:", ";}}"], ({
    theme: {
      colors
    }
  }) => colors.ui3, shape === 'round' && 'border-radius: 100%;', ({
    theme: {
      colors
    }
  }) => colors.neutral, ({
    theme: {
      colors
    }
  }) => colors.neutralInteractive, ({
    theme: {
      colors
    }
  }) => colors.ui3);
};

const IconButton = (0, _styledComponents.default)(IconButtonComponent).attrs(({
  type = 'button'
}) => ({
  type
})).withConfig({
  displayName: "IconButton",
  componentId: "n9jti8-1"
})(["", " ", " background:none;border:none;", " padding:0;", ""], _designTokens.reset, _designTokens.space, _iconButtonColor.iconButtonColor, props => props.outline && outlineCSS);
exports.IconButton = IconButton;
//# sourceMappingURL=IconButton.js.map