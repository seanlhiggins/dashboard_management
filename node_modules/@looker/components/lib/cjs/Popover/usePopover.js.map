{"version":3,"sources":["../../../src/Popover/usePopover.tsx"],"names":["useOpenWithoutElement","isOpen","element","openWithoutElem","setOpenWithoutElem","usePopover","canClose","content","disabled","pin","controlledIsOpen","onClose","placement","propsPlacement","setOpen","controlledSetOpen","triggerElement","triggerToggle","focusTrap","scrollLock","cancelClickOutside","surface","id","scrollElement","scrollRef","focusRef","newTriggerElement","callbackRef","handleOpen","event","stopPropagation","preventDefault","handleClose","usePopperProps","anchor","options","modifiers","enabled","name","flipVariations","flipVariationsByContent","scroll","popperInstanceRef","style","targetRef","verticalSpace","ref","containerElement","contentContainerRef","SurfaceComponent","OverlaySurface","dialogId","popover","closeModal","contentContainer","domProps","onClick","open"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport { Placement } from '@popperjs/core'\nimport React, {\n  useEffect,\n  useMemo,\n  ReactNode,\n  SyntheticEvent,\n  useState,\n  Ref,\n} from 'react'\nimport { Flex } from '../Layout'\nimport { Portal } from '../Portal'\nimport { DialogContext } from '../Dialog'\nimport { OverlaySurface } from '../Overlay/OverlaySurface'\nimport {\n  useCallbackRef,\n  useFocusTrap,\n  usePopper,\n  UsePopperProps,\n  useScrollLock,\n  useForkedRef,\n  useID,\n} from '../utils'\nimport { usePopoverToggle, UsePopoverToggleProps } from './usePopoverToggle'\nimport { useVerticalSpace } from './useVerticalSpace'\n\nexport interface UsePopoverProps extends UsePopoverToggleProps {\n  /**\n   * Content to render within the Popover surface.\n   */\n  content: ReactNode\n\n  /**\n   * Specify a callback to be called each time this Popover is closed\n   */\n  onClose?: () => void\n  /**\n   * Can be one of: top, bottom, left, right, auto, with the modifiers: start,\n   * end. This value comes directly from popperjs. See\n   * https://popper.js.org/popper-documentation.html#Popper.placements for more\n   * info.\n   * @default bottom\n   */\n  placement?: Placement\n\n  portalElement?: HTMLDivElement | null\n\n  /**\n   * By default Popover will reposition itself if they overflow the widow.\n   * You can use the pin property to override this behavior.\n   */\n  pin?: boolean\n\n  /**\n   * Set whether to disable scrolling outside the popover\n   */\n  disableScrollLock?: boolean\n\n  /**\n   * The trigger element ref to use (if absent, one will be created and returned)\n   */\n  triggerElement?: HTMLElement | null\n\n  /**\n   * Whether to trap focus within the popover\n   * @default true\n   */\n  focusTrap?: boolean\n\n  /**\n   * Whether to lock scrolling outside the popover\n   * @default true\n   */\n  scrollLock?: boolean\n\n  /**\n   * Custom surface component to render the content in\n   * @private\n   */\n  surface?: typeof OverlaySurface\n\n  /**\n   * The id of the dialog (if absent, a random id will be generated)\n   */\n  id?: string\n}\n\nconst useOpenWithoutElement = (\n  isOpen: boolean,\n  element: HTMLElement | null\n) => {\n  const [openWithoutElem, setOpenWithoutElem] = useState(\n    isOpen && element === null\n  )\n  useEffect(() => {\n    if (element && openWithoutElem) {\n      setOpenWithoutElem(false)\n    }\n  }, [openWithoutElem, element])\n  return openWithoutElem\n}\n\nexport interface UsePopoverResponseDom {\n  onClick: (event: SyntheticEvent) => void\n  /**\n   * Used by popper.js to position the OverlaySurface relative to the trigger\n   */\n  ref: Ref<any>\n  'aria-expanded': boolean\n  'aria-haspopup': boolean\n}\n\nexport const usePopover = ({\n  canClose,\n  content,\n  disabled,\n  pin = false,\n  isOpen: controlledIsOpen = false,\n  onClose,\n  placement: propsPlacement = 'bottom',\n  setOpen: controlledSetOpen,\n  triggerElement,\n  triggerToggle = true,\n  focusTrap = true,\n  scrollLock = true,\n  cancelClickOutside,\n  surface,\n  id,\n}: UsePopoverProps) => {\n  const [scrollElement, scrollRef] = useScrollLock({ disabled: !scrollLock })\n  const [, focusRef] = useFocusTrap({ disabled: !focusTrap })\n\n  const [newTriggerElement, callbackRef] = useCallbackRef()\n  // If the triggerElement is passed in props, use that instead of the new element\n  const element =\n    typeof triggerElement === 'undefined' ? newTriggerElement : triggerElement\n\n  const [isOpen, setOpen] = usePopoverToggle(\n    {\n      canClose,\n      cancelClickOutside,\n      isOpen: controlledIsOpen,\n      setOpen: controlledSetOpen,\n      triggerToggle,\n    },\n    scrollElement,\n    element\n  )\n\n  const openWithoutElem = useOpenWithoutElement(isOpen, element)\n\n  const handleOpen = (event: SyntheticEvent) => {\n    if (!disabled) {\n      setOpen(true)\n    }\n    event.stopPropagation()\n    event.preventDefault()\n  }\n\n  const handleClose = () => {\n    if (canClose && !canClose()) return\n    setOpen(false)\n    onClose && onClose()\n  }\n\n  const usePopperProps = useMemo<UsePopperProps>(\n    () => ({\n      anchor: element,\n      options: {\n        modifiers: [\n          {\n            enabled: !pin,\n            name: 'flip',\n            options: {\n              flipVariations: true,\n              flipVariationsByContent: true,\n            },\n          },\n          {\n            // No scroll event listener needed (we have useScrollLock)\n            enabled: true,\n            name: 'eventListeners',\n            options: {\n              scroll: false,\n            },\n          },\n        ],\n        placement: propsPlacement,\n      },\n    }),\n    [element, pin, propsPlacement]\n  )\n  const { placement, popperInstanceRef, style, targetRef } = usePopper(\n    usePopperProps\n  )\n\n  const verticalSpace = useVerticalSpace(\n    element,\n    pin,\n    propsPlacement,\n    isOpen,\n    style\n  )\n\n  const ref = useForkedRef(targetRef, focusRef)\n\n  const [containerElement, contentContainerRef] = useCallbackRef<HTMLElement>()\n\n  const SurfaceComponent = surface || OverlaySurface\n\n  const dialogId = useID(id)\n\n  const popover = content && !openWithoutElem && isOpen && !disabled && (\n    <DialogContext.Provider\n      value={{\n        closeModal: handleClose,\n        id: dialogId,\n      }}\n    >\n      <Portal ref={scrollRef}>\n        <SurfaceComponent placement={placement} ref={ref} style={style}>\n          <Flex\n            flexDirection=\"column\"\n            alignItems=\"flex-start\"\n            maxHeight={`calc(${verticalSpace - 10}px - 1rem)`}\n            overflowY=\"auto\"\n            borderRadius=\"inherit\"\n            ref={contentContainerRef}\n            data-testid=\"content-container\"\n          >\n            {content}\n          </Flex>\n        </SurfaceComponent>\n      </Portal>\n    </DialogContext.Provider>\n  )\n  return {\n    contentContainer: containerElement,\n    domProps: {\n      'aria-expanded': isOpen,\n      'aria-haspopup': content ? !disabled : false,\n      onClick: handleOpen,\n      ref: callbackRef,\n    },\n    isOpen,\n    open: handleOpen,\n    popover,\n    popperInstanceRef,\n    ref: callbackRef,\n  }\n}\n"],"file":"usePopover.js"}