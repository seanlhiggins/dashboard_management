"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tree = void 0;

require("core-js/modules/es.array.index-of.js");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _react = _interopRequireWildcard(require("react"));

var _Accordion = require("../Accordion");

var _utils = require("../utils");

var _List = require("../List");

var _utils2 = require("../List/utils");

var _TreeContext = require("./TreeContext");

var _utils3 = require("./utils");

var _TreeStyle = require("./TreeStyle");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const TreeLayout = (_ref) => {
  let branchFontWeight = _ref.branchFontWeight,
      propsBorder = _ref.border,
      children = _ref.children,
      className = _ref.className,
      color = _ref.color,
      propsDensity = _ref.density,
      propsDetail = _ref.detail,
      disabled = _ref.disabled,
      dividers = _ref.dividers,
      icon = _ref.icon,
      propsKeyColor = _ref.keyColor,
      propsLabel = _ref.label,
      onClick = _ref.onClick,
      onKeyUp = _ref.onKeyUp,
      onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      selected = _ref.selected,
      truncate = _ref.truncate,
      restProps = _objectWithoutProperties(_ref, ["branchFontWeight", "border", "children", "className", "color", "density", "detail", "disabled", "dividers", "icon", "keyColor", "label", "onClick", "onKeyUp", "onMouseEnter", "onMouseLeave", "selected", "truncate"]);

  const detailRef = (0, _react.useRef)(null);

  const _useState = (0, _react.useState)(false),
        _useState2 = _slicedToArray(_useState, 2),
        hovered = _useState2[0],
        setHovered = _useState2[1];

  const treeContext = (0, _react.useContext)(_TreeContext.TreeContext);
  const hasBorder = (0, _utils.undefinedCoalesce)([propsBorder, treeContext.border]);
  const useKeyColor = (0, _utils.undefinedCoalesce)([propsKeyColor, treeContext.keyColor]);
  const startingDepth = 0;
  const depth = treeContext.depth ? treeContext.depth : startingDepth;
  const density = propsDensity || treeContext.density;

  const _listItemDimensions = (0, _utils2.listItemDimensions)(density),
        iconSize = _listItemDimensions.iconSize;

  const _getDetailOptions = (0, _utils2.getDetailOptions)(propsDetail),
        accessory = _getDetailOptions.accessory,
        content = _getDetailOptions.content,
        hoverDisclosure = _getDetailOptions.hoverDisclosure;

  const handleDetailClick = event => {
    if (accessory && detailRef.current && detailRef.current.contains(event.target)) {
      event.stopPropagation();
    }
  };

  const handleDetailKeyDown = event => {
    if (accessory && detailRef.current && detailRef.current.contains(event.target)) {
      event.stopPropagation();
    }
  };

  const handleMouseEnter = (0, _utils.useWrapEvent)(() => setHovered(true), onMouseEnter);
  const handleMouseLeave = (0, _utils.useWrapEvent)(() => setHovered(false), onMouseLeave);
  const detail = {
    content: _react.default.createElement(_TreeStyle.TreeItemInnerDetail, {
      onClick: handleDetailClick,
      onKeyDown: handleDetailKeyDown,
      ref: detailRef
    }, content),
    options: {
      accessory,
      hoverDisclosure
    }
  };

  const label = _react.default.createElement(_TreeStyle.TreeItemInner, {
    color: color,
    density: density,
    detail: detail,
    disabled: disabled,
    icon: icon,
    truncate: truncate
  }, propsLabel);

  const indicatorColor = disabled ? 'text1' : color;

  const innerAccordion = _react.default.createElement(_Accordion.Accordion, _extends({}, _utils3.indicatorDefaults, restProps, {
    indicatorSize: iconSize
  }), _react.default.createElement(_Accordion.AccordionDisclosure, {
    color: indicatorColor,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    py: "none"
  }, label), _react.default.createElement(_Accordion.AccordionContent, null, _react.default.createElement(_List.List, {
    density: density
  }, children)));

  return _react.default.createElement(_TreeContext.TreeContext.Provider, {
    value: {
      border: hasBorder,
      density,
      depth: depth + 1,
      keyColor: useKeyColor
    }
  }, _react.default.createElement(_TreeStyle.TreeStyle, {
    border: hasBorder,
    branchFontWeight: branchFontWeight,
    className: className,
    depth: depth,
    disabled: disabled,
    dividers: dividers,
    hovered: hovered,
    indicatorSize: iconSize,
    keyColor: useKeyColor,
    selected: selected
  }, innerAccordion));
};

const Tree = (0, _styledComponents.default)(TreeLayout).withConfig({
  displayName: "Tree",
  componentId: "umxml-0"
})([""]);
exports.Tree = Tree;
//# sourceMappingURL=Tree.js.map