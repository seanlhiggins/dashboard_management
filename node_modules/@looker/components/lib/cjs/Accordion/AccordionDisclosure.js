"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccordionDisclosure = exports.AccordionDisclosureStyle = void 0;

require("core-js/modules/es.array.index-of.js");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _utils = require("../utils");

var _simple = require("../Layout/utils/simple");

var _AccordionContext = require("./AccordionContext");

var _AccordionDisclosureLayout = require("./AccordionDisclosureLayout");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const AccordionDisclosureInternal = (0, _react.forwardRef)((_ref, ref) => {
  let children = _ref.children,
      className = _ref.className,
      onBlur = _ref.onBlur,
      onClick = _ref.onClick,
      onKeyDown = _ref.onKeyDown,
      onKeyUp = _ref.onKeyUp,
      props = _objectWithoutProperties(_ref, ["children", "className", "onBlur", "onClick", "onKeyDown", "onKeyUp"]);

  const _useState = (0, _react.useState)(false),
        _useState2 = _slicedToArray(_useState, 2),
        isFocusVisible = _useState2[0],
        setFocusVisible = _useState2[1];

  const _useContext = (0, _react.useContext)(_AccordionContext.AccordionContext),
        accordionContentId = _useContext.accordionContentId,
        accordionDisclosureId = _useContext.accordionDisclosureId,
        isOpen = _useContext.isOpen,
        toggleOpen = _useContext.toggleOpen,
        onClose = _useContext.onClose,
        onOpen = _useContext.onOpen,
        accordionProps = _objectWithoutProperties(_useContext, ["accordionContentId", "accordionDisclosureId", "isOpen", "toggleOpen", "onClose", "onOpen"]);

  const handleOpen = () => onOpen && onOpen();

  const handleClose = () => onClose && onClose();

  const handleToggle = () => {
    isOpen ? handleClose() : handleOpen();
    toggleOpen(!isOpen);
  };

  const handleKeyDown = (0, _utils.useWrapEvent)(event => event.key === 'Enter' && handleToggle(), onKeyDown);
  const handleKeyUp = (0, _utils.useWrapEvent)(event => event.key === 'Tab' && event.currentTarget === event.target && setFocusVisible(true), onKeyUp);
  const handleClick = (0, _utils.useWrapEvent)(() => {
    setFocusVisible(false);
    handleToggle();
  }, onClick);
  const handleBlur = (0, _utils.useWrapEvent)(() => setFocusVisible(false), onBlur);
  return _react.default.createElement(AccordionDisclosureStyle, _extends({
    className: className,
    role: "button",
    "aria-controls": accordionContentId,
    "aria-expanded": isOpen,
    focusVisible: isFocusVisible,
    id: accordionDisclosureId,
    onBlur: handleBlur,
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    onKeyUp: handleKeyUp,
    ref: ref,
    tabIndex: 0
  }, props), _react.default.createElement(_AccordionDisclosureLayout.AccordionDisclosureLayout, _extends({}, accordionProps, {
    isOpen: isOpen
  }), children));
});
AccordionDisclosureInternal.displayName = 'AccordionDisclosureInternal';

const AccordionDisclosureStyle = _styledComponents.default.div.withConfig({
  shouldForwardProp: _designTokens.shouldForwardProp
}).attrs(({
  px = 'none',
  py = 'xsmall'
}) => ({
  px,
  py
})).withConfig({
  displayName: "AccordionDisclosure__AccordionDisclosureStyle",
  componentId: "sc-8407zi-0"
})(["align-items:center;background-color:transparent;", " cursor:pointer;display:flex;", " outline:none;text-align:left;width:100%;", ""], ({
  color,
  theme
}) => color ? _designTokens.color : `color: ${theme.colors.ui5};`, _designTokens.padding, ({
  focusVisible,
  theme
}) => focusVisible && `
      &:focus {
        box-shadow: inset 0 0 0 2px ${theme.colors.keyFocus};
      }
    `);

exports.AccordionDisclosureStyle = AccordionDisclosureStyle;
const AccordionDisclosure = (0, _styledComponents.default)(AccordionDisclosureInternal).attrs(props => _objectSpread({
  fontSize: 'small',
  fontWeight: 'semiBold'
}, props)).withConfig({
  displayName: "AccordionDisclosure",
  componentId: "sc-8407zi-1"
})(["", " ", ""], _designTokens.typography, _simple.simpleLayoutCSS);
exports.AccordionDisclosure = AccordionDisclosure;
//# sourceMappingURL=AccordionDisclosure.js.map