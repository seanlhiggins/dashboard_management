"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Accordion = exports.AccordionControlPropKeys = exports.AccordionIndicatorPropKeys = void 0;

require("core-js/modules/es.array.index-of.js");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _simple = require("../Layout/utils/simple");

var _utils = require("../utils");

var _AccordionContext = require("./AccordionContext");

var _AccordionContent = require("./AccordionContent");

var _AccordionDisclosure = require("./AccordionDisclosure");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const AccordionIndicatorPropKeys = ['indicatorPosition', 'indicatorSize', 'indicatorGap', 'indicatorIcons'];
exports.AccordionIndicatorPropKeys = AccordionIndicatorPropKeys;
const AccordionControlPropKeys = ['defaultOpen', 'isOpen', 'toggleOpen', 'onClose', 'onOpen'];
exports.AccordionControlPropKeys = AccordionControlPropKeys;

const AccordionLayout = (_ref) => {
  let children = _ref.children,
      className = _ref.className,
      id = _ref.id,
      indicatorGap = _ref.indicatorGap,
      indicatorSize = _ref.indicatorSize,
      indicatorIcons = _ref.indicatorIcons,
      indicatorPosition = _ref.indicatorPosition,
      props = _objectWithoutProperties(_ref, ["children", "className", "id", "indicatorGap", "indicatorSize", "indicatorIcons", "indicatorPosition"]);

  const _useState = (0, _react.useState)(!!props.defaultOpen),
        _useState2 = _slicedToArray(_useState, 2),
        isOpen = _useState2[0],
        setIsOpen = _useState2[1];

  if (props.isOpen && props.toggleOpen === undefined || props.isOpen === undefined && props.toggleOpen) console.warn('Please provide both an isOpen prop and a toggleOpen prop if you wish to control a Accordion state. If you would like an uncontrolled Accordion, avoid passing in either prop into your Accordion element.');
  const accordionId = (0, _utils.useID)(id);

  const context = _objectSpread(_objectSpread({}, _AccordionContext.accordionContextDefaults), {}, {
    accordionContentId: `${accordionId}-content`,
    accordionDisclosureId: `${accordionId}-disclosure`,
    indicatorGap: indicatorGap || _AccordionContext.accordionContextDefaults.indicatorGap,
    indicatorIcons: indicatorIcons || _AccordionContext.accordionContextDefaults.indicatorIcons,
    indicatorPosition: indicatorPosition || _AccordionContext.accordionContextDefaults.indicatorPosition,
    indicatorSize: indicatorSize || _AccordionContext.accordionContextDefaults.indicatorSize,
    isOpen: props.isOpen === undefined ? isOpen : props.isOpen,
    onClose: props.onClose,
    onOpen: props.onOpen,
    toggleOpen: props.toggleOpen === undefined ? setIsOpen : props.toggleOpen
  });

  return _react.default.createElement(_AccordionContext.AccordionContext.Provider, {
    value: context
  }, _react.default.createElement("div", {
    className: className,
    id: accordionId
  }, children));
};

const Accordion = (0, _styledComponents.default)(AccordionLayout).attrs(({
  indicatorGap = _AccordionContext.accordionContextDefaults.indicatorGap,
  indicatorPosition = _AccordionContext.accordionContextDefaults.indicatorPosition,
  indicatorSize = _AccordionContext.accordionContextDefaults.indicatorSize,
  width = '100%'
}) => ({
  indicatorGap,
  indicatorPosition,
  indicatorSize,
  width
})).withConfig({
  displayName: "Accordion",
  componentId: "egrkwf-0"
})(["", ",", "{", "}"], _AccordionDisclosure.AccordionDisclosure, _AccordionContent.AccordionContent, _simple.simpleLayoutCSS);
exports.Accordion = Accordion;
//# sourceMappingURL=Accordion.js.map