"use strict";

require("core-js/modules/es.weak-map.js");

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarNav = exports.headingSizeMap = void 0;

var _reactI18next = require("react-i18next");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _ChevronLeft = require("@styled-icons/material-rounded/ChevronLeft");

var _ChevronRight = require("@styled-icons/material-rounded/ChevronRight");

var _Tooltip = require("../Tooltip");

var _Button = require("../Button");

var _Text = require("../Text");

var _CalendarContext = require("./CalendarContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const headingSizeMap = size => {
  switch (size) {
    case 'small':
      return 'h6';

    case 'medium':
      return 'h5';

    case 'large':
      return 'h4';

    default:
      return 'h5';
  }
};

exports.headingSizeMap = headingSizeMap;

const CalendarNav = ({
  month,
  labels,
  localeUtils,
  nextMonth,
  previousMonth
}) => {
  const _useTranslation = (0, _reactI18next.useTranslation)('CalendarNav'),
        t = _useTranslation.t;

  const _useContext = (0, _react.useContext)(_CalendarContext.CalendarContext),
        size = _useContext.size,
        _useContext$onNowClic = _useContext.onNowClick,
        onNowClick = _useContext$onNowClic === void 0 ? _noop.default : _useContext$onNowClic,
        _useContext$onNextCli = _useContext.onNextClick,
        onNextClick = _useContext$onNextCli === void 0 ? _noop.default : _useContext$onNextCli,
        _useContext$onPrevCli = _useContext.onPrevClick,
        onPrevClick = _useContext$onPrevCli === void 0 ? _noop.default : _useContext$onPrevCli,
        showPreviousButton = _useContext.showPreviousButton,
        showNextButton = _useContext.showNextButton;

  const handleNextClick = e => {
    e.preventDefault();
    onNextClick(nextMonth);
  };

  const handlePreviousClick = e => {
    e.preventDefault();
    onPrevClick(previousMonth);
  };

  const handleLabelClick = () => {
    onNowClick(new Date(Date.now()));
  };

  return _react.default.createElement(NavGrid, null, _react.default.createElement(NextButtonWrapper, null, showPreviousButton && _react.default.createElement(_Button.IconButton, {
    icon: _react.default.createElement(_ChevronLeft.ChevronLeft, null),
    label: labels.previousMonth,
    size: size,
    onClick: handlePreviousClick
  })), _react.default.createElement(_Tooltip.Tooltip, {
    content: t('View Current Month')
  }, _react.default.createElement(_Button.ButtonTransparent, {
    onClick: handleLabelClick,
    color: "neutral"
  }, _react.default.createElement(_Text.Heading, {
    as: headingSizeMap(size),
    fontWeight: "semiBold",
    fontFamily: "body"
  }, localeUtils.formatMonthTitle(month)))), _react.default.createElement(PrevButtonWrapper, null, showNextButton && _react.default.createElement(_Button.IconButton, {
    icon: _react.default.createElement(_ChevronRight.ChevronRight, null),
    label: labels.nextMonth,
    size: size,
    onClick: handleNextClick,
    style: {
      justifySelf: 'right'
    }
  })));
};

exports.CalendarNav = CalendarNav;

const NavGrid = _styledComponents.default.div.withConfig({
  displayName: "CalendarNav__NavGrid",
  componentId: "sc-4c8g0d-0"
})(["align-items:center;display:grid;grid-template-columns:40px 1fr 40px;justify-items:center;"]);

const NextButtonWrapper = _styledComponents.default.div.withConfig({
  displayName: "CalendarNav__NextButtonWrapper",
  componentId: "sc-4c8g0d-1"
})(["justify-self:left;"]);

const PrevButtonWrapper = _styledComponents.default.div.withConfig({
  displayName: "CalendarNav__PrevButtonWrapper",
  componentId: "sc-4c8g0d-2"
})(["justify-self:right;"]);
//# sourceMappingURL=CalendarNav.js.map