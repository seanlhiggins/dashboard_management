"use strict";

require("core-js/modules/es.weak-map.js");

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Card = void 0;

var _designTokens = require("@looker/design-tokens");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _complex = require("../Layout/utils/complex");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const cardTransition = () => (0, _styledComponents.css)(["", ""], ({
  theme
}) => `${theme.transitions.quick}ms ${theme.easings.ease}`);

const raised = props => props.raised && (0, _styledComponents.css)(["box-shadow:", ";&:hover{box-shadow:", ";}"], props => props.theme.shadows[1], props => props.theme.shadows[2]);

const Card = _styledComponents.default.div.withConfig({
  shouldForwardProp: _designTokens.shouldForwardProp
}).attrs(({
  bg = 'background',
  border = '1px solid',
  borderColor = 'ui3',
  borderRadius = 'medium',
  display = 'flex',
  flexDirection = 'column',
  height = '100%',
  minWidth = '200px',
  overflow = 'hidden'
}) => ({
  bg,
  border,
  borderColor,
  borderRadius,
  display,
  flexDirection,
  height,
  minWidth,
  overflow
})).withConfig({
  displayName: "Card",
  componentId: "sc-11cdxqo-0"
})(["", " ", " transition:border ", ",box-shadow ", ";&:hover{border-color:", ";}", ""], _complex.complexLayoutCSS, _designTokens.flexbox, cardTransition, cardTransition, ({
  theme
}) => theme.colors.ui4, raised);

exports.Card = Card;
//# sourceMappingURL=Card.js.map