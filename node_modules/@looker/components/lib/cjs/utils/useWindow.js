"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useWindow = void 0;

require("core-js/modules/es.array.slice.js");

var _react = _interopRequireWildcard(require("react"));

var _getWindowedListBoundaries = require("./getWindowedListBoundaries");

var _useCallbackRef3 = require("./useCallbackRef");

var _useMeasuredElement3 = require("./useMeasuredElement");

var _useScrollPosition = require("./useScrollPosition");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const initialState = {
  afterHeight: 0,
  beforeHeight: 0,
  end: 0,
  scrollBottom: 0,
  scrollTop: 0,
  start: 0
};
const bufferHeight = 1000;

const reducer = (state, action) => {
  let beforeHeight = state.beforeHeight,
      afterHeight = state.afterHeight,
      start = state.start,
      end = state.end;
  const _action$payload = action.payload,
        scrollPosition = _action$payload.scrollPosition,
        height = _action$payload.height,
        totalHeight = _action$payload.totalHeight,
        childHeightLadder = _action$payload.childHeightLadder;
  const scrollTop = scrollPosition;
  const scrollBottom = scrollPosition + height;

  if (!childHeightLadder[start] || beforeHeight !== childHeightLadder[start]) {
    start = 0;
  }

  if (!childHeightLadder[end] || afterHeight !== totalHeight - childHeightLadder[end + 1]) {
    end = childHeightLadder.length - 1;
  }

  const bufferedTop = Math.max(0, scrollTop - bufferHeight);
  const bufferedBottom = Math.min(scrollBottom + bufferHeight, totalHeight);

  while (childHeightLadder[start] < bufferedTop) {
    start += 1;
  }

  if (start > 0) {
    while (childHeightLadder[start] > bufferedTop) {
      start -= 1;
    }
  }

  if (end + 1 < childHeightLadder.length) {
    while (childHeightLadder[end] < bufferedBottom) {
      end += 1;
    }
  }

  while (childHeightLadder[end] > bufferedBottom) {
    end -= 1;
  }

  return {
    afterHeight: end + 1 === childHeightLadder.length ? 0 : totalHeight - childHeightLadder[end + 1],
    beforeHeight: childHeightLadder[start],
    end,
    scrollBottom,
    scrollTop,
    start
  };
};

const useWindow = ({
  children,
  enabled,
  childHeight,
  ref,
  spacerTag = 'div'
}) => {
  const childArray = (0, _react.useMemo)(() => _react.Children.toArray(children), [children]);

  const _useMemo = (0, _react.useMemo)(() => {
    let sum = 0;
    const ladder = [];

    if (typeof childHeight === 'function') {
      childArray.forEach((child, index) => {
        ladder.push(sum);
        sum += childHeight(child, index);
      });
    }

    return [sum, ladder];
  }, [childHeight, childArray]),
        _useMemo2 = _slicedToArray(_useMemo, 2),
        totalHeight = _useMemo2[0],
        childHeightLadder = _useMemo2[1];

  const _useCallbackRef = (0, _useCallbackRef3.useCallbackRef)(ref),
        _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
        containerElement = _useCallbackRef2[0],
        callbackRef = _useCallbackRef2[1];

  const _useMeasuredElement = (0, _useMeasuredElement3.useMeasuredElement)(enabled ? containerElement : null),
        _useMeasuredElement2 = _slicedToArray(_useMeasuredElement, 1),
        height = _useMeasuredElement2[0].height;

  const scrollPosition = (0, _useScrollPosition.useScrollPosition)(enabled ? containerElement : null);

  const _useReducer = (0, _react.useReducer)(reducer, initialState),
        _useReducer2 = _slicedToArray(_useReducer, 2),
        variable = _useReducer2[0],
        dispatch = _useReducer2[1];

  (0, _react.useEffect)(() => {
    if (totalHeight > 0) {
      if (enabled) {
        dispatch({
          payload: {
            childHeightLadder,
            height,
            scrollPosition,
            totalHeight
          },
          type: 'CHANGE'
        });
      }
    }
  }, [enabled, childHeightLadder, height, scrollPosition, totalHeight]);
  const fixed = (0, _react.useMemo)(() => {
    if (typeof childHeight === 'number') {
      return (0, _getWindowedListBoundaries.getWindowedListBoundaries)({
        enabled,
        height,
        itemHeight: childHeight,
        length: childArray.length,
        scrollPosition
      });
    }

    return false;
  }, [enabled, childArray, height, childHeight, scrollPosition]);

  const _ref = fixed || variable,
        start = _ref.start,
        end = _ref.end,
        beforeHeight = _ref.beforeHeight,
        afterHeight = _ref.afterHeight;

  const Spacer = spacerTag;
  const before = beforeHeight > 0 ? _react.default.createElement(Spacer, {
    style: {
      height: `${beforeHeight}px`
    },
    "data-testid": "before"
  }) : null;
  const after = afterHeight > 0 ? _react.default.createElement(Spacer, {
    style: {
      height: `${afterHeight}px`
    },
    "data-testid": "after"
  }) : null;
  return {
    containerElement,
    content: enabled ? _react.default.createElement(_react.default.Fragment, null, before, childArray.slice(start, end + 1), after) : childArray,
    ref: callbackRef
  };
};

exports.useWindow = useWindow;
//# sourceMappingURL=useWindow.js.map