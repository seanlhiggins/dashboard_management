"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseDateFromString = exports.formatYear = exports.formatDateString = exports.dateFnLocaleMap = exports.Locales = void 0;

var _format = _interopRequireDefault(require("date-fns-tz/format"));

var _utcToZonedTime = _interopRequireDefault(require("date-fns-tz/utcToZonedTime"));

var _isValid = _interopRequireDefault(require("date-fns/isValid"));

var _parse = _interopRequireDefault(require("date-fns/parse"));

var _arSA = _interopRequireDefault(require("date-fns/locale/ar-SA"));

var _de = _interopRequireDefault(require("date-fns/locale/de"));

var _enUS = _interopRequireDefault(require("date-fns/locale/en-US"));

var _es = _interopRequireDefault(require("date-fns/locale/es"));

var _fr = _interopRequireDefault(require("date-fns/locale/fr"));

var _it = _interopRequireDefault(require("date-fns/locale/it"));

var _ja = _interopRequireDefault(require("date-fns/locale/ja"));

var _ko = _interopRequireDefault(require("date-fns/locale/ko"));

var _nl = _interopRequireDefault(require("date-fns/locale/nl"));

var _pl = _interopRequireDefault(require("date-fns/locale/pl"));

var _pt = _interopRequireDefault(require("date-fns/locale/pt"));

var _ptBR = _interopRequireDefault(require("date-fns/locale/pt-BR"));

var _ru = _interopRequireDefault(require("date-fns/locale/ru"));

var _sv = _interopRequireDefault(require("date-fns/locale/sv"));

var _tr = _interopRequireDefault(require("date-fns/locale/tr"));

var _zhCN = _interopRequireDefault(require("date-fns/locale/zh-CN"));

var _zhTW = _interopRequireDefault(require("date-fns/locale/zh-TW"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let Locales;
exports.Locales = Locales;

(function (Locales) {
  Locales["Arabic"] = "ar";
  Locales["German"] = "de";
  Locales["English"] = "en";
  Locales["Spanish"] = "es";
  Locales["French"] = "fr";
  Locales["Italian"] = "it";
  Locales["Japanese"] = "ja";
  Locales["Korean"] = "ko";
  Locales["Dutch"] = "nl";
  Locales["Polish"] = "pl";
  Locales["Portuguese"] = "pt";
  Locales["PortugueseBrazil"] = "pt-br";
  Locales["Russian"] = "ru";
  Locales["Swedish"] = "sv";
  Locales["Turkish"] = "tr";
  Locales["Chinese"] = "zh-cn";
  Locales["ChineseTaiwan"] = "zh-tw";
})(Locales || (exports.Locales = Locales = {}));

const dateFnLocaleMap = {
  [Locales.Arabic]: _arSA.default,
  [Locales.German]: _de.default,
  [Locales.English]: _enUS.default,
  [Locales.Spanish]: _es.default,
  [Locales.French]: _fr.default,
  [Locales.Italian]: _it.default,
  [Locales.Japanese]: _ja.default,
  [Locales.Korean]: _ko.default,
  [Locales.Dutch]: _nl.default,
  [Locales.Polish]: _pl.default,
  [Locales.Portuguese]: _pt.default,
  [Locales.PortugueseBrazil]: _ptBR.default,
  [Locales.Russian]: _ru.default,
  [Locales.Turkish]: _tr.default,
  [Locales.Swedish]: _sv.default,
  [Locales.Chinese]: _zhCN.default,
  [Locales.ChineseTaiwan]: _zhTW.default
};
exports.dateFnLocaleMap = dateFnLocaleMap;

const formatDateString = (date, locale = Locales.English, stringFormat = 'P', timeZone = undefined) => {
  if (!date) {
    return '';
  }

  const renderedDate = timeZone ? (0, _utcToZonedTime.default)(date, timeZone) : date;
  return (0, _format.default)(renderedDate, stringFormat, _objectSpread({
    locale: dateFnLocaleMap[locale]
  }, timeZone && {
    timeZone
  }));
};

exports.formatDateString = formatDateString;

const formatYear = date => {
  const year = date.getFullYear();

  if (year < 100) {
    return year + 2000;
  } else if (year < 1000) {
    return parseInt(`${year}0`);
  }

  return year;
};

exports.formatYear = formatYear;

const parseDateFromString = (value, locale = Locales.English) => {
  const parsedValue = (0, _parse.default)(value, 'P', new Date(), {
    locale: dateFnLocaleMap[locale]
  });
  parsedValue.setFullYear(formatYear(parsedValue));
  return (0, _isValid.default)(parsedValue) && parsedValue;
};

exports.parseDateFromString = parseDateFromString;
//# sourceMappingURL=i18n.js.map