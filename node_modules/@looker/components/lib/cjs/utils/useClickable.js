"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useClickable = useClickable;

var _react = require("react");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function useClickable({
  disabled,
  onBlur: _onBlur,
  onClick: _onClick,
  onKeyUp: _onKeyUp,
  role
}) {
  const _useState = (0, _react.useState)(false),
        _useState2 = _slicedToArray(_useState, 2),
        focusVisible = _useState2[0],
        setFocusVisible = _useState2[1];

  return (0, _react.useMemo)(() => ({
    disabled,
    focusVisible,
    onBlur: e => {
      _onBlur === null || _onBlur === void 0 ? void 0 : _onBlur(e);
      setFocusVisible(false);
    },
    onClick: e => {
      if (!disabled) {
        _onClick === null || _onClick === void 0 ? void 0 : _onClick(e);
        setFocusVisible(false);
      }
    },
    onKeyUp: e => {
      const shouldHandle = !disabled && e.currentTarget === e.target;

      if (shouldHandle) {
        switch (e.key) {
          case 'Enter':
          case ' ':
            _onClick === null || _onClick === void 0 ? void 0 : _onClick(e);
            break;
        }

        setFocusVisible(true);
      }

      _onKeyUp === null || _onKeyUp === void 0 ? void 0 : _onKeyUp(e);
    },
    role: role || (_onClick ? 'button' : undefined),
    tabIndex: disabled ? undefined : 0
  }), [disabled, focusVisible, _onBlur, _onClick, _onKeyUp, role]);
}
//# sourceMappingURL=useClickable.js.map