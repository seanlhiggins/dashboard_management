"use strict";

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataTableCell = void 0;

require("core-js/modules/es.symbol.description.js");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Layout = require("../../Layout");

var _Text = require("../../Text");

var _Truncate = require("../../Truncate");

var _utils = require("../../utils");

var _columnSize = require("./columnSize");

var _FocusableCell = require("./FocusableCell");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const DataTableCellLayout = (0, _react.forwardRef)((props, forwardedRef) => {
  const children = props.children,
        description = props.description,
        indicator = props.indicator,
        onBlur = props.onBlur,
        onClick = props.onClick,
        onKeyUp = props.onKeyUp,
        size = props.size;

  const _useState = (0, _react.useState)(false),
        _useState2 = _slicedToArray(_useState, 2),
        isFocusVisible = _useState2[0],
        setFocusVisible = _useState2[1];

  const handleOnKeyUp = event => {
    setFocusVisible(true);
    onKeyUp && onKeyUp(event);
  };

  const handleOnBlur = event => {
    setFocusVisible(false);
    onBlur && onBlur(event);
  };

  const handleOnClick = event => {
    setFocusVisible(false);
    onClick && onClick(event);
  };

  let content = size && size !== 'nowrap' ? _react.default.createElement(_Truncate.Truncate, null, children) : children;
  const ref = (0, _react.useRef)(null);
  const forkedRef = (0, _utils.useForkedRef)(ref, forwardedRef);
  (0, _react.useEffect)(() => {
    var _ref$current;

    const element = ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.querySelectorAll('a, button, input');

    if (element) {
      element.forEach(activeElement => activeElement.setAttribute('tabIndex', '-1'));
    }
  });

  if (description) {
    content = _react.default.createElement(_Layout.SpaceVertical, {
      gap: "xxxsmall",
      align: "stretch"
    }, _react.default.createElement("span", null, content), description && _react.default.createElement(_Text.Paragraph, {
      fontSize: "xsmall",
      color: "subdued",
      truncate: true
    }, _react.default.createElement(_Truncate.Truncate, null, description)));

    if (indicator) {
      content = _react.default.createElement(_Layout.Space, {
        gap: "medium"
      }, indicator, content);
    }
  } else if (indicator) {
    content = _react.default.createElement(_Layout.Space, {
      gap: "medium"
    }, indicator, _react.default.createElement("span", null, content));
  }

  return _react.default.createElement(_FocusableCell.FocusableCell, _extends({
    focusVisible: isFocusVisible,
    onBlur: handleOnBlur,
    onClick: handleOnClick,
    onKeyUp: handleOnKeyUp,
    ref: forkedRef
  }, props), content);
});
DataTableCellLayout.displayName = 'DataTableCellLayout';
const DataTableCell = (0, _styledComponents.default)(DataTableCellLayout).withConfig({
  displayName: "DataTableCell",
  componentId: "sc-1sdic09-0"
})(["", ""], _columnSize.columnSize);
exports.DataTableCell = DataTableCell;
//# sourceMappingURL=DataTableCell.js.map