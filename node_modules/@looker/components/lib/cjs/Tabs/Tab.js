"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tab = void 0;

require("core-js/modules/es.array.index-of.js");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const TabStyle = _styledComponents.default.button.withConfig({
  shouldForwardProp: _designTokens.shouldForwardProp
}).attrs(({
  type = 'button'
}) => ({
  type
})).withConfig({
  displayName: "Tab__TabStyle",
  componentId: "eojndt-0"
})(["", " ", " ", " ", " background:transparent;border:none;border-bottom:3px solid;border-bottom-color:", ";border-radius:0;", " color:", ";cursor:pointer;font-family:", ";margin:0;&:active{border-bottom-color:", ";}&:active,&:hover{border-bottom-color:transparent;}&:focus{outline:none;}&:hover{border-bottom-color:", ";}&:disabled{border-bottom-color:transparent;color:", ";cursor:default;}"], _designTokens.reset, _designTokens.layout, _designTokens.padding, _designTokens.typography, ({
  selected,
  theme
}) => selected ? theme.colors.key : 'transparent', ({
  focusVisible
}) => focusVisible && _designTokens.tabShadowColor, ({
  selected,
  theme
}) => selected ? theme.colors.text5 : theme.colors.text2, ({
  theme
}) => theme.fonts.brand, ({
  selected,
  theme
}) => selected ? theme.colors.key : theme.colors.text2, ({
  selected,
  theme
}) => selected ? theme.colors.key : theme.colors.ui3, ({
  theme
}) => theme.colors.text1);

const TabJSX = (0, _react.forwardRef)((props, ref) => {
  const children = props.children,
        disabled = props.disabled,
        index = props.index,
        onBlur = props.onBlur,
        onKeyUp = props.onKeyUp,
        onSelect = props.onSelect,
        selected = props.selected,
        restProps = _objectWithoutProperties(props, ["children", "disabled", "index", "onBlur", "onKeyUp", "onSelect", "selected"]);

  const _useState = (0, _react.useState)(false),
        _useState2 = _slicedToArray(_useState, 2),
        isFocusVisible = _useState2[0],
        setFocusVisible = _useState2[1];

  const handleOnKeyUp = event => {
    setFocusVisible(true);
    onKeyUp && onKeyUp(event);
  };

  const handleOnBlur = event => {
    setFocusVisible(false);
    onBlur && onBlur(event);
  };

  const onClick = () => {
    if (!disabled && onSelect) {
      onSelect();
    }

    setFocusVisible(false);
  };

  return _react.default.createElement(TabStyle, _extends({
    "aria-controls": `panel-${index}`,
    "aria-orientation": "horizontal",
    "aria-selected": selected,
    disabled: disabled,
    focusVisible: isFocusVisible,
    id: `tab-${index}`,
    onBlur: handleOnBlur,
    onClick: onClick,
    onKeyUp: handleOnKeyUp,
    ref: ref,
    role: "tab",
    selected: selected,
    tabIndex: -1
  }, restProps), children);
});
TabJSX.displayName = 'TabJSX';
const Tab = (0, _styledComponents.default)(TabJSX).attrs(({
  fontSize = 'small',
  fontWeight = 'medium',
  pb = 'small',
  pt = 'xsmall'
}) => ({
  fontSize,
  fontWeight,
  pb,
  pt
})).withConfig({
  displayName: "Tab",
  componentId: "eojndt-1"
})([""]);
exports.Tab = Tab;
//# sourceMappingURL=Tab.js.map