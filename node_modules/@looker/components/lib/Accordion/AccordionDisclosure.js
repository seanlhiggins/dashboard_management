import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext, forwardRef, useState } from 'react';
import styled from 'styled-components';
import { typography, padding, shouldForwardProp, color as colorStyleFn } from '@looker/design-tokens';
import { useWrapEvent } from '../utils';
import { simpleLayoutCSS } from '../Layout/utils/simple';
import { AccordionContext } from './AccordionContext';
import { AccordionDisclosureLayout } from './AccordionDisclosureLayout';
var AccordionDisclosureInternal = forwardRef(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      onBlur = _ref.onBlur,
      onClick = _ref.onClick,
      onKeyDown = _ref.onKeyDown,
      onKeyUp = _ref.onKeyUp,
      props = _objectWithoutProperties(_ref, ["children", "className", "onBlur", "onClick", "onKeyDown", "onKeyUp"]);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocusVisible = _useState2[0],
      setFocusVisible = _useState2[1];

  var _useContext = useContext(AccordionContext),
      accordionContentId = _useContext.accordionContentId,
      accordionDisclosureId = _useContext.accordionDisclosureId,
      isOpen = _useContext.isOpen,
      toggleOpen = _useContext.toggleOpen,
      onClose = _useContext.onClose,
      onOpen = _useContext.onOpen,
      accordionProps = _objectWithoutProperties(_useContext, ["accordionContentId", "accordionDisclosureId", "isOpen", "toggleOpen", "onClose", "onOpen"]);

  var handleOpen = function handleOpen() {
    return onOpen && onOpen();
  };

  var handleClose = function handleClose() {
    return onClose && onClose();
  };

  var handleToggle = function handleToggle() {
    isOpen ? handleClose() : handleOpen();
    toggleOpen(!isOpen);
  };

  var handleKeyDown = useWrapEvent(function (event) {
    return event.key === 'Enter' && handleToggle();
  }, onKeyDown);
  var handleKeyUp = useWrapEvent(function (event) {
    return event.key === 'Tab' && event.currentTarget === event.target && setFocusVisible(true);
  }, onKeyUp);
  var handleClick = useWrapEvent(function () {
    setFocusVisible(false);
    handleToggle();
  }, onClick);
  var handleBlur = useWrapEvent(function () {
    return setFocusVisible(false);
  }, onBlur);
  return React.createElement(AccordionDisclosureStyle, _extends({
    className: className,
    role: "button",
    "aria-controls": accordionContentId,
    "aria-expanded": isOpen,
    focusVisible: isFocusVisible,
    id: accordionDisclosureId,
    onBlur: handleBlur,
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    onKeyUp: handleKeyUp,
    ref: ref,
    tabIndex: 0
  }, props), React.createElement(AccordionDisclosureLayout, _extends({}, accordionProps, {
    isOpen: isOpen
  }), children));
});
AccordionDisclosureInternal.displayName = 'AccordionDisclosureInternal';
export var AccordionDisclosureStyle = styled.div.withConfig({
  shouldForwardProp: shouldForwardProp
}).attrs(function (_ref2) {
  var _ref2$px = _ref2.px,
      px = _ref2$px === void 0 ? 'none' : _ref2$px,
      _ref2$py = _ref2.py,
      py = _ref2$py === void 0 ? 'xsmall' : _ref2$py;
  return {
    px: px,
    py: py
  };
}).withConfig({
  displayName: "AccordionDisclosure__AccordionDisclosureStyle",
  componentId: "sc-8407zi-0"
})(["align-items:center;background-color:transparent;", " cursor:pointer;display:flex;", " outline:none;text-align:left;width:100%;", ""], function (_ref3) {
  var color = _ref3.color,
      theme = _ref3.theme;
  return color ? colorStyleFn : "color: ".concat(theme.colors.ui5, ";");
}, padding, function (_ref4) {
  var focusVisible = _ref4.focusVisible,
      theme = _ref4.theme;
  return focusVisible && "\n      &:focus {\n        box-shadow: inset 0 0 0 2px ".concat(theme.colors.keyFocus, ";\n      }\n    ");
});
export var AccordionDisclosure = styled(AccordionDisclosureInternal).attrs(function (props) {
  return _objectSpread({
    fontSize: 'small',
    fontWeight: 'semiBold'
  }, props);
}).withConfig({
  displayName: "AccordionDisclosure",
  componentId: "sc-8407zi-1"
})(["", " ", ""], typography, simpleLayoutCSS);
//# sourceMappingURL=AccordionDisclosure.js.map