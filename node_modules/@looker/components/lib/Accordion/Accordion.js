import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState } from 'react';
import styled from 'styled-components';
import { simpleLayoutCSS } from '../Layout/utils/simple';
import { useID } from '../utils';
import { AccordionContext, accordionContextDefaults } from './AccordionContext';
import { AccordionContent } from './AccordionContent';
import { AccordionDisclosure } from './AccordionDisclosure';
export var AccordionIndicatorPropKeys = ['indicatorPosition', 'indicatorSize', 'indicatorGap', 'indicatorIcons'];
export var AccordionControlPropKeys = ['defaultOpen', 'isOpen', 'toggleOpen', 'onClose', 'onOpen'];

var AccordionLayout = function AccordionLayout(_ref) {
  var children = _ref.children,
      className = _ref.className,
      id = _ref.id,
      indicatorGap = _ref.indicatorGap,
      indicatorSize = _ref.indicatorSize,
      indicatorIcons = _ref.indicatorIcons,
      indicatorPosition = _ref.indicatorPosition,
      props = _objectWithoutProperties(_ref, ["children", "className", "id", "indicatorGap", "indicatorSize", "indicatorIcons", "indicatorPosition"]);

  var _useState = useState(!!props.defaultOpen),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  if (props.isOpen && props.toggleOpen === undefined || props.isOpen === undefined && props.toggleOpen) console.warn('Please provide both an isOpen prop and a toggleOpen prop if you wish to control a Accordion state. If you would like an uncontrolled Accordion, avoid passing in either prop into your Accordion element.');
  var accordionId = useID(id);

  var context = _objectSpread(_objectSpread({}, accordionContextDefaults), {}, {
    accordionContentId: "".concat(accordionId, "-content"),
    accordionDisclosureId: "".concat(accordionId, "-disclosure"),
    indicatorGap: indicatorGap || accordionContextDefaults.indicatorGap,
    indicatorIcons: indicatorIcons || accordionContextDefaults.indicatorIcons,
    indicatorPosition: indicatorPosition || accordionContextDefaults.indicatorPosition,
    indicatorSize: indicatorSize || accordionContextDefaults.indicatorSize,
    isOpen: props.isOpen === undefined ? isOpen : props.isOpen,
    onClose: props.onClose,
    onOpen: props.onOpen,
    toggleOpen: props.toggleOpen === undefined ? setIsOpen : props.toggleOpen
  });

  return React.createElement(AccordionContext.Provider, {
    value: context
  }, React.createElement("div", {
    className: className,
    id: accordionId
  }, children));
};

export var Accordion = styled(AccordionLayout).attrs(function (_ref2) {
  var _ref2$indicatorGap = _ref2.indicatorGap,
      indicatorGap = _ref2$indicatorGap === void 0 ? accordionContextDefaults.indicatorGap : _ref2$indicatorGap,
      _ref2$indicatorPositi = _ref2.indicatorPosition,
      indicatorPosition = _ref2$indicatorPositi === void 0 ? accordionContextDefaults.indicatorPosition : _ref2$indicatorPositi,
      _ref2$indicatorSize = _ref2.indicatorSize,
      indicatorSize = _ref2$indicatorSize === void 0 ? accordionContextDefaults.indicatorSize : _ref2$indicatorSize,
      _ref2$width = _ref2.width,
      width = _ref2$width === void 0 ? '100%' : _ref2$width;
  return {
    indicatorGap: indicatorGap,
    indicatorPosition: indicatorPosition,
    indicatorSize: indicatorSize,
    width: width
  };
}).withConfig({
  displayName: "Accordion",
  componentId: "egrkwf-0"
})(["", ",", "{", "}"], AccordionDisclosure, AccordionContent, simpleLayoutCSS);
//# sourceMappingURL=Accordion.js.map