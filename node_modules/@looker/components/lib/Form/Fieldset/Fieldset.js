import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.string.small.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import omit from 'lodash/omit';
import pick from 'lodash/pick';
import React, { createContext, forwardRef } from 'react';
import styled from 'styled-components';
import { omitStyledProps } from '@looker/design-tokens';
import { ArrowDropDown } from '@styled-icons/material/ArrowDropDown';
import { ArrowRight } from '@styled-icons/material/ArrowRight';
import { Space, SpaceVertical } from '../../Layout';
import { simpleLayoutCSS } from '../../Layout/utils/simple';
import { Legend } from '../Legend';
import { Accordion, AccordionContent, AccordionControlPropKeys, AccordionDisclosure } from '../../Accordion';
var accordionIndicatorDefaults = {
  indicatorGap: 'xsmall',
  indicatorIcons: {
    close: React.createElement(ArrowRight, null),
    open: React.createElement(ArrowDropDown, null)
  },
  indicatorPosition: 'left',
  indicatorSize: 'medium'
};
export var FieldsetContext = createContext({});
var FieldsetLayout = forwardRef(function (props, ref) {
  var _omit = omit(props, _toConsumableArray(AccordionControlPropKeys)),
      accordion = _omit.accordion,
      className = _omit.className,
      inline = _omit.inline,
      _omit$gap = _omit.gap,
      gap = _omit$gap === void 0 ? 'medium' : _omit$gap,
      legend = _omit.legend,
      fieldsHideLabel = _omit.fieldsHideLabel,
      children = _omit.children,
      wrap = _omit.wrap,
      restProps = _objectWithoutProperties(_omit, ["accordion", "className", "inline", "gap", "legend", "fieldsHideLabel", "children", "wrap"]);

  var accordionProps = _objectSpread(_objectSpread({}, pick(props, _toConsumableArray(AccordionControlPropKeys))), accordionIndicatorDefaults);

  var LayoutComponent = inline ? Space : SpaceVertical;
  var content = React.createElement(LayoutComponent, {
    gap: gap,
    ref: ref,
    role: "group",
    align: "start",
    flexWrap: wrap ? 'wrap' : undefined
  }, children);
  !legend && accordion && console.warn('Please provide a value for the "legend" prop if using accordion mode');
  var renderedFieldset = legend ? accordion ? React.createElement(Accordion, accordionProps, React.createElement(AccordionDisclosure, null, legend), React.createElement(AccordionContent, null, content)) : React.createElement(SpaceVertical, null, typeof legend === 'string' ? React.createElement(Legend, null, legend) : legend, content) : content;
  return React.createElement(FieldsetContext.Provider, {
    value: {
      fieldsHideLabel: fieldsHideLabel || false
    }
  }, React.createElement("div", _extends({}, omitStyledProps(restProps), {
    className: className
  }), renderedFieldset));
});
FieldsetLayout.displayName = 'FieldsetLayout';
export var Fieldset = styled(FieldsetLayout).attrs(function (_ref) {
  var _ref$width = _ref.width,
      width = _ref$width === void 0 ? '100%' : _ref$width;
  return {
    width: width
  };
}).withConfig({
  displayName: "Fieldset",
  componentId: "fc4a60-0"
})(["", " ", "{padding-left:", ";padding-top:", ";}", "{font-size:", ";font-weight:", ";height:24px;padding:", " 0;}"], simpleLayoutCSS, AccordionContent, function (_ref2) {
  var theme = _ref2.theme;
  var borderWidth = '1px';
  var defaultIndicatorSize = theme.space.medium;
  var defaultIndicatorGap = theme.space.xsmall;
  return "calc(".concat(borderWidth, " + ").concat(defaultIndicatorSize, " + ").concat(defaultIndicatorGap, ")");
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.space.medium;
}, AccordionDisclosure, function (_ref4) {
  var theme = _ref4.theme;
  return theme.fontSizes.small;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.fontWeights.semiBold;
}, function (_ref6) {
  var space = _ref6.theme.space;
  return space.xxsmall;
});
//# sourceMappingURL=Fieldset.js.map