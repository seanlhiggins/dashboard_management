import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.string.small.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import { inputTextHover, inputTextFocus, inputTextDisabled, inputTextValidation, inputCSS, ErrorIcon } from '../InputText';
import { simpleLayoutCSS } from '../../../Layout/utils/simple';
import { pickInputProps } from '../InputProps';

var TextAreaLayout = function TextAreaLayout(_ref) {
  var className = _ref.className,
      validationType = _ref.validationType,
      props = _objectWithoutProperties(_ref, ["className", "validationType"]);

  var textareaProps = pickInputProps(props);
  return React.createElement("div", {
    className: className
  }, React.createElement("textarea", _extends({
    "aria-invalid": validationType === 'error' ? 'true' : undefined
  }, textareaProps)), validationType && React.createElement(ErrorIcon, null));
};

var textAreaResize = function textAreaResize(resize) {
  return resize === false ? 'none' : resize === true ? 'vertical' : resize;
};

export var TextArea = styled(TextAreaLayout).attrs(function (_ref2) {
  var _ref2$resize = _ref2.resize,
      resize = _ref2$resize === void 0 ? 'vertical' : _ref2$resize,
      _ref2$minHeight = _ref2.minHeight,
      minHeight = _ref2$minHeight === void 0 ? '6.25rem' : _ref2$minHeight;
  return {
    minHeight: minHeight,
    resize: resize
  };
}).withConfig({
  displayName: "TextArea",
  componentId: "sc-10ezzv1-0"
})(["height:fit-content;position:relative;width:100%;", "{position:absolute;right:0.5rem;top:0.5rem;}textarea{", " ", " padding:", ";padding-right:", ";resize:", ";width:100%;&:hover{", "}&:focus,:focus-within{", "}", " ", "}"], ErrorIcon, simpleLayoutCSS, inputCSS, function (_ref3) {
  var theme = _ref3.theme;
  return "".concat(theme.space.xsmall, " ").concat(theme.space.small);
}, function (props) {
  return props.theme.space.xlarge;
}, function (props) {
  return textAreaResize(props.resize);
}, inputTextHover, inputTextFocus, function (props) {
  return props.disabled ? inputTextDisabled : '';
}, inputTextValidation);
TextArea.displayName = 'TextArea';
//# sourceMappingURL=TextArea.js.map