import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import noop from 'lodash/noop';
import React, { forwardRef, useState, useEffect } from 'react';
import styled from 'styled-components';
import { reset, space } from '@looker/design-tokens';
import isUndefined from 'lodash/isUndefined';
import { pickInputProps } from '../InputProps';
import { inputTextValidation } from '../InputText';
import { CheckMark } from './CheckMark';
import { CheckMarkMixed } from './CheckMarkMixed';
import { FauxCheckbox } from './FauxCheckbox';
var CheckboxLayout = forwardRef(function (props, ref) {
  var className = props.className,
      checked = props.checked,
      defaultChecked = props.defaultChecked,
      onChange = props.onChange,
      readOnly = props.readOnly,
      validationType = props.validationType,
      restProps = _objectWithoutProperties(props, ["className", "checked", "defaultChecked", "onChange", "readOnly", "validationType"]);

  var _useState = useState(!!defaultChecked),
      _useState2 = _slicedToArray(_useState, 2),
      isChecked = _useState2[0],
      setIsChecked = _useState2[1];

  var handleClick = readOnly ? undefined : function (e) {
    if (isUndefined(checked)) {
      setIsChecked(!isChecked);
    }

    if (onChange) {
      onChange(e);
    }
  };
  useEffect(function () {
    if (!isUndefined(checked)) {
      setIsChecked(checked);
    }
  }, [checked]);
  return React.createElement("div", {
    className: className
  }, React.createElement("input", _extends({
    type: "checkbox"
  }, pickInputProps(restProps), {
    checked: !!isChecked,
    "aria-checked": checked,
    "aria-invalid": validationType === 'error' ? 'true' : undefined,
    onClick: handleClick,
    onChange: noop,
    ref: ref
  })), React.createElement(FauxCheckbox, null, checked === 'mixed' ? React.createElement(CheckMarkMixed, null) : React.createElement(CheckMark, null)));
});
CheckboxLayout.displayName = 'CheckboxLayout';
export var Checkbox = styled(CheckboxLayout).withConfig({
  displayName: "Checkbox",
  componentId: "sc-9j2vap-0"
})(["", " ", " height:1rem;position:relative;width:1rem;input{cursor:", ";height:100%;margin:0;opacity:0;position:absolute;width:100%;z-index:1;}input + ", "{", "}input:checked + ", "{background-color:", ";border-color:", ";}input:not(:checked) + ", "{color:", ";}input:focus + ", "{border-color:", ";box-shadow:0 0 0 2px ", ";outline:none;}input:disabled + ", "{background:", ";border-color:", ";color:", ";}input:disabled:not(:checked) + ", "{color:transparent;}"], reset, space, function (_ref) {
  var readOnly = _ref.readOnly,
      disabled = _ref.disabled;
  return readOnly || disabled ? 'not-allowed' : undefined;
}, FauxCheckbox, inputTextValidation, FauxCheckbox, function (_ref2) {
  var theme = _ref2.theme;
  return theme.colors.key;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.colors.key;
}, FauxCheckbox, function (_ref4) {
  var theme = _ref4.theme;
  return theme.colors.keyText;
}, FauxCheckbox, function (_ref5) {
  var theme = _ref5.theme;
  return theme.colors.keyFocus;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.colors.keyAccent;
}, FauxCheckbox, function (_ref7) {
  var theme = _ref7.theme;
  return theme.colors.ui1;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.colors.ui2;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.colors.text1;
}, FauxCheckbox);
//# sourceMappingURL=Checkbox.js.map