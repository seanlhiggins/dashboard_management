import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.date.now.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useTranslation } from 'react-i18next';
import React, { useState, useEffect, forwardRef } from 'react';
import styled from 'styled-components';
import isFunction from 'lodash/isFunction';
import isEqual from 'lodash/isEqual';
import { VisuallyHidden } from '../../../VisuallyHidden';
import { InputText } from '../InputText';
import { Calendar, formatMonthTitle } from '../../../Calendar';
import { formatDateString, parseDateFromString } from '../../../utils/i18n';
import { useReadOnlyWarn } from '../../../utils/useReadOnlyWarn';

var isDateInView = function isDateInView(value, viewMonth) {
  if (value.getFullYear() === viewMonth.getFullYear() && value.getMonth() === viewMonth.getMonth()) {
    return true;
  }

  return false;
};

export var InputDate = forwardRef(function (_ref, ref) {
  var ariaDescribedby = _ref['aria-describedby'],
      ariaLabelledby = _ref['aria-labelledby'],
      dateStringLocale = _ref.dateStringLocale,
      defaultValue = _ref.defaultValue,
      disabled = _ref.disabled,
      localization = _ref.localization,
      id = _ref.id,
      onChange = _ref.onChange,
      onValidationFail = _ref.onValidationFail,
      readOnly = _ref.readOnly,
      validationType = _ref.validationType,
      value = _ref.value;

  var _useTranslation = useTranslation('InputDate'),
      t = _useTranslation.t;

  useReadOnlyWarn('InputDate', value, onChange);

  var _useState = useState(value || defaultValue),
      _useState2 = _slicedToArray(_useState, 2),
      selectedDate = _useState2[0],
      setSelectedDate = _useState2[1];

  var _useState3 = useState(validationType !== 'error'),
      _useState4 = _slicedToArray(_useState3, 2),
      validDate = _useState4[0],
      setValidDate = _useState4[1];

  var _useState5 = useState(selectedDate ? formatDateString(selectedDate, dateStringLocale) : ''),
      _useState6 = _slicedToArray(_useState5, 2),
      textInputValue = _useState6[0],
      setTextInputValue = _useState6[1];

  var _useState7 = useState(value || defaultValue || new Date(Date.now())),
      _useState8 = _slicedToArray(_useState7, 2),
      viewMonth = _useState8[0],
      setViewMonth = _useState8[1];

  var handleDateChange = function handleDateChange(date) {
    if (!validationType) {
      setValidDate(true);
    }

    setSelectedDate(date);
    setViewMonth(date);

    if (isFunction(onChange)) {
      onChange(date);
    }
  };

  var handleDayClick = function handleDayClick(date) {
    setTextInputValue(formatDateString(date, dateStringLocale));
    handleDateChange(date);
  };

  var handleTextInputChange = function handleTextInputChange(e) {
    var value = e.target.value;
    setTextInputValue(value);

    if (value.length === 0) {
      handleDateChange();
    } else {
      var parsedValue = parseDateFromString(value, dateStringLocale);

      if (parsedValue) {
        handleDateChange(parsedValue);
      }
    }
  };

  var handleValidation = function handleValidation(e) {
    if (!validationType) {
      var _value = e.target.value;
      var isValid = _value.length === 0 || !!parseDateFromString(_value, dateStringLocale);
      setValidDate(isValid);

      if (!isValid && isFunction(onValidationFail)) {
        onValidationFail(_value);
      }
    }
  };

  var handleNavClick = function handleNavClick(month) {
    setViewMonth(month);
  };

  var renderedValidationType = !validDate ? 'error' : undefined;
  useEffect(function () {
    if (value && !isEqual(value, selectedDate)) {
      setSelectedDate(value);
      value && setTextInputValue(formatDateString(value, dateStringLocale));
      value && viewMonth && !isDateInView(value, viewMonth) && setViewMonth(value);
    }
  }, [textInputValue, value, onChange]);
  return React.createElement(InputDateWrapper, null, React.createElement(InputText, {
    "aria-describedby": ariaDescribedby,
    "aria-labelledby": ariaLabelledby,
    placeholder: "".concat(t('Date'), " (").concat(formatDateString(new Date(Date.now()), dateStringLocale), ")"),
    value: textInputValue,
    onChange: handleTextInputChange,
    validationType: renderedValidationType,
    onBlur: handleValidation,
    "data-testid": "text-input",
    id: id,
    ref: ref,
    disabled: disabled,
    readOnly: readOnly
  }), React.createElement(CalendarWrapper, null, React.createElement(VisuallyHidden, {
    "aria-live": "assertive"
  }, viewMonth ? formatMonthTitle(localization)(viewMonth) : ''), React.createElement(Calendar, {
    selectedDates: selectedDate,
    onDayClick: handleDayClick,
    localization: localization,
    viewMonth: viewMonth,
    onMonthChange: setViewMonth,
    onNowClick: handleNavClick,
    onNextClick: handleNavClick,
    onPrevClick: handleNavClick,
    disabled: disabled,
    readOnly: readOnly
  })));
});
InputDate.displayName = 'InputDate';
var InputDateWrapper = styled.div.withConfig({
  displayName: "InputDate__InputDateWrapper",
  componentId: "sc-9tulkd-0"
})(["width:100%;"]);
var CalendarWrapper = styled.div.withConfig({
  displayName: "InputDate__CalendarWrapper",
  componentId: "sc-9tulkd-1"
})(["", "{padding:0;}"], Calendar);
//# sourceMappingURL=InputDate.js.map