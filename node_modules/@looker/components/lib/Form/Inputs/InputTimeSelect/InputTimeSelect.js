function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.date.now.js";
import "core-js/modules/es.string.split.js";
import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.array.includes.js";
import "core-js/modules/es.string.includes.js";
import "core-js/modules/es.string.replace.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.object.assign.js";
import { useTranslation } from 'react-i18next';
import React, { useCallback, forwardRef, useState, useEffect } from 'react';
import styled from 'styled-components';
import reduce from 'lodash/reduce';
import map from 'lodash/map';
import isFunction from 'lodash/isFunction';
import find from 'lodash/find';
import trim from 'lodash/trim';
import last from 'lodash/last';
import head from 'lodash/head';
import sortedIndex from 'lodash/sortedIndex';
import throttle from 'lodash/throttle';
import { Combobox, ComboboxInput, ComboboxList, ComboboxOption } from '../Combobox';
import { useReadOnlyWarn } from '../../../utils';
import { pickAriaAndValidationProps } from '../Select/utils/ariaProps';
import { formatTimeString, parseBase10Int, isValidTime } from '../InputTime/utils';

var cycleHourDisplay = function cycleHourDisplay(format, hour) {
  if (format === '12h') {
    if (hour === 0) {
      return 12;
    } else if (hour > 12) {
      return hour - 12;
    }
  }

  return hour;
};

var formatLabel = function formatLabel(format, hour, minute) {
  var formattedHour = formatTimeString(cycleHourDisplay(format, hour));
  var formattedMinute = formatTimeString(minute);
  var period = format === '12h' && (hour < 12 ? 'am' : 'pm');
  return trim("".concat(formattedHour, ":").concat(formattedMinute, " ").concat(period || ''));
};

var generateMinuteIntervals = function generateMinuteIntervals(interval) {
  var minutes = new Array(60 / interval);
  return map(minutes, function (_, index) {
    return formatTimeString(index * interval);
  });
};

var generateTimes = function generateTimes(format, interval) {
  var hours = new Array(24);
  var minutes = generateMinuteIntervals(interval);
  return reduce(hours, function (result, _, hour) {
    var formatLabel = format === '12h' && (hour < 12 ? 'am' : 'pm');
    var formattedHour = formatTimeString(cycleHourDisplay(format, hour));
    var hourWithMinutes = map(minutes, function (minute) {
      var label = trim("".concat(formattedHour, ":").concat(minute, " ").concat(formatLabel || ''));
      var value = "".concat(formatTimeString(hour), ":").concat(minute);
      return {
        label: label,
        value: value
      };
    });
    return [].concat(_toConsumableArray(result), _toConsumableArray(hourWithMinutes));
  }, []);
};

var matchClosestMinute = function matchClosestMinute(interval, timeCode) {
  var minuteOptions = map(generateMinuteIntervals(interval), parseBase10Int);
  var now = new Date(Date.now());
  var currentMinute = timeCode ? parseBase10Int(timeCode.split(':')[1]) : now.getMinutes();
  var currentHour = timeCode ? parseBase10Int(timeCode.split(':')[0]) : now.getHours();
  var index = sortedIndex(minuteOptions, currentMinute);
  var optionBefore = minuteOptions[index - 1] || head(minuteOptions);
  var optionAfter = minuteOptions[index] || last(minuteOptions);
  var roundedMinute = currentMinute - optionBefore < optionAfter - currentMinute ? optionBefore : optionAfter;
  var formattedHour = formatTimeString(currentHour);
  var formattedMinute = formatTimeString(roundedMinute);
  return "".concat(formattedHour, ":").concat(formattedMinute);
};

var createOptionFromStringValue = function createOptionFromStringValue(format, value) {
  var _map = map(value.split(':'), parseBase10Int),
      _map2 = _slicedToArray(_map, 2),
      hour = _map2[0],
      minute = _map2[1];

  return {
    label: formatLabel(format, hour, minute),
    value: value
  };
};

var convert12to24hr = function convert12to24hr(hour, period) {
  if (hour + period === '12am') {
    return 0;
  } else if (period === 'pm' && hour < 12) {
    return hour + 12;
  } else {
    return hour;
  }
};

var createOptionFromLabel = function createOptionFromLabel(format, label) {
  var period = label.toLowerCase().includes('p') ? 'pm' : 'am';
  var numericTime = label.replace(/[apm]/gi, '');

  var _numericTime$split$ma = numericTime.split(':').map(parseBase10Int),
      _numericTime$split$ma2 = _slicedToArray(_numericTime$split$ma, 2),
      _numericTime$split$ma3 = _numericTime$split$ma2[0],
      hour = _numericTime$split$ma3 === void 0 ? 0 : _numericTime$split$ma3,
      _numericTime$split$ma4 = _numericTime$split$ma2[1],
      minute = _numericTime$split$ma4 === void 0 ? 0 : _numericTime$split$ma4;

  var hr24 = convert12to24hr(hour, period);
  var value = "".concat(formatTimeString(hr24), ":").concat(formatTimeString(minute));

  if (isValidTime(value)) {
    return {
      label: formatLabel(format, hr24, minute),
      value: value
    };
  }

  return undefined;
};

var matchStringValueToOption = function matchStringValueToOption(options, format, value) {
  if (value && isValidTime(value)) {
    var option = find(options, {
      value: value
    });
    return option || createOptionFromStringValue(format, value);
  }

  return undefined;
};

var matchStringLabelToOption = function matchStringLabelToOption(options, label) {
  if (label) {
    return find(options, function (o) {
      return o.label ? o.label.includes(label) : false;
    });
  }

  return undefined;
};

var setScrollIntoView = function setScrollIntoView(options, interval, selectedOption) {
  if (selectedOption) {
    return map(options, function (option) {
      return matchClosestMinute(interval, selectedOption.value) === option.value ? _objectSpread(_objectSpread({}, option), {}, {
        scrollIntoView: true
      }) : option;
    });
  }

  var now = matchClosestMinute(interval);
  return map(options, function (option) {
    return option.value === now ? _objectSpread(_objectSpread({}, option), {}, {
      scrollIntoView: true
    }) : option;
  });
};

var arrowKeys = ['ArrowDown', 'ArrowUp', 'ArrowRight', 'ArrowLeft'];
var InputTimeSelectLayout = forwardRef(function (_ref, ref) {
  var className = _ref.className,
      _ref$interval = _ref.interval,
      interval = _ref$interval === void 0 ? 15 : _ref$interval,
      _ref$format = _ref.format,
      format = _ref$format === void 0 ? '12h' : _ref$format,
      onChange = _ref.onChange,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? '' : _ref$value,
      defaultValue = _ref.defaultValue,
      validationType = _ref.validationType,
      disabled = _ref.disabled,
      autoFocus = _ref.autoFocus,
      id = _ref.id,
      props = _objectWithoutProperties(_ref, ["className", "interval", "format", "onChange", "value", "defaultValue", "validationType", "disabled", "autoFocus", "id"]);

  var _useTranslation = useTranslation('InputTimeSelect'),
      t = _useTranslation.t;

  useReadOnlyWarn('InputTimeSelect', value, onChange);
  var valueProp = value || defaultValue;

  if (!isValidTime(valueProp)) {
    console.error("Invalid time (\"".concat(valueProp, "\") passed to <InputTimeSelect />. Value should be formatted as a 24-hour string (e.g. value=\"02:00\" or value=\"23:15\")."));
  }

  var timeOptions = generateTimes(format, interval);

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      selectedOption = _useState2[0],
      setSelectedOption = _useState2[1];

  var _useState3 = useState(''),
      _useState4 = _slicedToArray(_useState3, 2),
      inputTextValue = _useState4[0],
      setInputTextValue = _useState4[1];

  useEffect(function () {
    setSelectedOption(matchStringValueToOption(timeOptions, format, value || defaultValue));
  }, [value]);

  var handleChange = function handleChange(newSelectedOption) {
    setSelectedOption(newSelectedOption);
    var newValue = newSelectedOption ? newSelectedOption.value : undefined;

    if (isFunction(onChange) && isValidTime(newValue)) {
      onChange(newValue);
    }
  };

  var throttledHandleChange = useCallback(throttle(function (v) {
    handleChange(v);
  }, 50, {
    trailing: false
  }), [handleChange]);

  var handleTextInputChange = function handleTextInputChange(e) {
    setInputTextValue(e.target.value);
  };

  var handleTextInputBlur = function handleTextInputBlur() {
    setInputTextValue('');
  };

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      isNavigating = _useState6[0],
      setIsNavigating = _useState6[1];

  var handleKeyDown = function handleKeyDown(e) {
    var key = e.key;

    if (arrowKeys.includes(key)) {
      setIsNavigating(true);
    } else if (key === 'Enter' || key === 'Tab') {
      if (inputTextValue.length) {
        var option = createOptionFromLabel(format, inputTextValue);
        !isNavigating && throttledHandleChange(option);
      }
    } else {
      setIsNavigating(false);
    }
  };

  var optionToFocus = matchStringLabelToOption(timeOptions, inputTextValue) || selectedOption;
  var timeOptionsFocused = setScrollIntoView(timeOptions, interval, optionToFocus);
  var ariaProps = pickAriaAndValidationProps(props);
  return React.createElement(Combobox, {
    className: className,
    ref: ref,
    onChange: throttledHandleChange,
    value: selectedOption
  }, React.createElement(ComboboxInput, _extends({
    placeholder: t('Select time'),
    onChange: handleTextInputChange,
    onBlur: handleTextInputBlur,
    onKeyDown: handleKeyDown,
    autoComplete: false,
    validationType: validationType,
    disabled: disabled,
    autoFocus: autoFocus,
    id: id
  }, ariaProps)), React.createElement(ComboboxList, {
    persistSelection: true
  }, timeOptionsFocused.map(function (option, index) {
    return React.createElement(ComboboxOption, _extends({}, option, {
      key: index
    }));
  })));
});
InputTimeSelectLayout.displayName = 'InputTimeSelectLayout';
export var InputTimeSelect = styled(InputTimeSelectLayout).withConfig({
  displayName: "InputTimeSelect",
  componentId: "jpi7di-0"
})(["width:100%;"]);
//# sourceMappingURL=InputTimeSelect.js.map