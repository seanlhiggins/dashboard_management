import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { reset, space, toggleSwitchShadowColor } from '@looker/design-tokens';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { pickInputProps } from '../InputProps';
import { KnobContainer } from './Knob';
var DisabledKnob = styled.div.withConfig({
  displayName: "ToggleSwitch__DisabledKnob",
  componentId: "wcqgi4-0"
})(["", " background:", ";border-radius:1.25rem;bottom:0;left:0;opacity:0.4;position:absolute;right:0;top:0;"], reset, function (_ref) {
  var theme = _ref.theme;
  return theme.colors.ui3;
});
export var ToggleSwitchLayout = forwardRef(function (_ref2, ref) {
  var className = _ref2.className,
      disabled = _ref2.disabled,
      on = _ref2.on,
      validationType = _ref2.validationType,
      props = _objectWithoutProperties(_ref2, ["className", "disabled", "on", "validationType"]);

  return React.createElement("div", {
    className: className
  }, React.createElement("input", _extends({
    type: "checkbox",
    checked: on,
    disabled: disabled,
    role: "switch",
    "aria-checked": on,
    "aria-invalid": validationType === 'error' ? 'true' : undefined,
    ref: ref
  }, pickInputProps(props))), React.createElement(KnobContainer, {
    on: on,
    disabled: disabled
  }), disabled && React.createElement(DisabledKnob, null));
});
ToggleSwitchLayout.displayName = 'ToggleSwitchLayout';
export var ToggleSwitch = styled(ToggleSwitchLayout).withConfig({
  displayName: "ToggleSwitch",
  componentId: "wcqgi4-1"
})(["", " ", " height:1.25rem;position:relative;width:2.1875rem;input{cursor:", ";height:100%;left:0;margin:0;opacity:0;position:absolute;top:0;width:100%;z-index:1;&:focus + div{", "}}"], reset, space, function (_ref3) {
  var disabled = _ref3.disabled;
  return disabled ? undefined : 'pointer';
}, toggleSwitchShadowColor);
//# sourceMappingURL=ToggleSwitch.js.map