import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.string.small.js";
import { width } from '@looker/design-tokens';
import React, { useContext } from 'react';
import styled, { css } from 'styled-components';
import omit from 'lodash/omit';
import pick from 'lodash/pick';
import { Paragraph, Text } from '../../Text';
import { FieldsetContext } from '../Fieldset';
import { inputHeight } from '../Inputs/height';
import { Label } from '../Label';
import { VisuallyHidden } from '../../VisuallyHidden';
import { ValidationMessage } from '../ValidationMessage';
import { RequiredStar } from './RequiredStar';
export var fieldPropKeys = ['description', 'detail', 'id', 'inline', 'label', 'hideLabel', 'labelWidth', 'validationMessage', 'width'];
export var pickFieldProps = function pickFieldProps(props) {
  return pick(props, [].concat(fieldPropKeys, ['disabled', 'required', 'className', 'autoResize']));
};
export var omitFieldProps = function omitFieldProps(props) {
  return omit(props, fieldPropKeys);
};

var FieldLayout = function FieldLayout(_ref) {
  var className = _ref.className,
      children = _ref.children,
      description = _ref.description,
      detail = _ref.detail,
      id = _ref.id,
      ariaLabelOnly = _ref.ariaLabelOnly,
      label = _ref.label,
      hideLabel = _ref.hideLabel,
      required = _ref.required,
      validationMessage = _ref.validationMessage;

  var _useContext = useContext(FieldsetContext),
      fieldsHideLabel = _useContext.fieldsHideLabel;

  var fieldDescription = description && React.createElement(Paragraph, {
    mt: "xsmall",
    fontSize: "xsmall",
    color: "text2"
  }, description);
  var fieldValidation = validationMessage && React.createElement(ValidationMessage, validationMessage);
  var labelComponent = React.createElement(Label, {
    htmlFor: ariaLabelOnly ? undefined : id,
    id: "labelledby-".concat(id)
  }, label, required && React.createElement(RequiredStar, null));
  return React.createElement("div", {
    className: className
  }, (fieldsHideLabel || hideLabel) && hideLabel !== false ? React.createElement(VisuallyHidden, null, labelComponent) : labelComponent, detail && React.createElement(FieldDetail, null, detail), React.createElement(InputArea, null, children), React.createElement(MessageArea, {
    id: "describedby-".concat(id)
  }, fieldDescription, fieldValidation));
};

var FieldDetail = styled(Text).attrs(function () {
  return {
    color: 'inherit',
    fontSize: 'xsmall',
    lineHeight: 'xsmall'
  };
}).withConfig({
  displayName: "Field__FieldDetail",
  componentId: "m8c1e2-0"
})([""]);
var InputArea = styled.div.withConfig({
  displayName: "Field__InputArea",
  componentId: "m8c1e2-1"
})(["min-width:0;"]);
var MessageArea = styled.div.withConfig({
  displayName: "Field__MessageArea",
  componentId: "m8c1e2-2"
})([""]);

var fieldLabelCSS = function fieldLabelCSS(inline) {
  return inline ? css(["height:", ";justify-self:end;line-height:", ";padding-right:", ";text-align:right;"], inputHeight, inputHeight, function (_ref2) {
    var theme = _ref2.theme;
    return theme.space.small;
  }) : css(["line-height:", ";padding-bottom:", ";"], function (_ref3) {
    var theme = _ref3.theme;
    return theme.lineHeights.xsmall;
  }, function (_ref4) {
    var theme = _ref4.theme;
    return theme.space.xxsmall;
  });
};

export var Field = styled(FieldLayout).withConfig({
  displayName: "Field",
  componentId: "m8c1e2-3"
})(["align-items:left;display:", ";grid-template-areas:", ";grid-template-columns:", ";height:fit-content;justify-content:space-between;width:", ";", " ", "{align-items:center;", " grid-area:input;}", "{grid-area:messages;}& > ", "{grid-area:label;", "}", "{grid-area:detail;justify-self:end;padding-left:", ";", "}", "{margin-top:", ";}"], function (_ref5) {
  var autoResize = _ref5.autoResize;
  return autoResize ? 'inline-grid' : 'grid';
}, function (_ref6) {
  var inline = _ref6.inline;
  return inline ? '"label input detail" ". messages messages"' : '"label detail" "input input" "messages messages"';
}, function (_ref7) {
  var inline = _ref7.inline;
  return inline ? '150px 1fr' : undefined;
}, function (_ref8) {
  var autoResize = _ref8.autoResize;
  return autoResize ? 'fit-content' : '100%';
}, width, InputArea, function (_ref9) {
  var autoResize = _ref9.autoResize;
  return autoResize && css(["align-items:stretch;display:flex;flex-direction:column;"]);
}, MessageArea, Label, function (_ref10) {
  var inline = _ref10.inline;
  return fieldLabelCSS(inline);
}, FieldDetail, function (_ref11) {
  var space = _ref11.theme.space;
  return space.small;
}, function (_ref12) {
  var inline = _ref12.inline;
  return inline && css(["align-self:center;"]);
}, ValidationMessage, function (_ref13) {
  var theme = _ref13.theme;
  return theme.space.xsmall;
});
//# sourceMappingURL=Field.js.map